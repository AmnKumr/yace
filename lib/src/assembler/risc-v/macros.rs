/*
 * Permission is hereby granted, free of charge, to any human obtaining a copy of this software and associated documentation files
 * (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify,
 * merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit humans to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

macro_rules! 𝖉𝖊𝖋𝖎𝖓𝖊_𝖗𝖎𝖘𝖈𝖛_𝖆𝖘𝖘𝖊𝖒𝖇𝖑𝖊𝖗_𝖙𝖗𝖆𝖎𝖙 {
    (   $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓻𝓮𝓼𝓽𝓻𝓲𝓬𝓽𝓲𝓸𝓷𝓼:tt
        pub trait $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓽𝓻𝓪𝓲𝓽_𝓷𝓪𝓶𝓮:ident {
           $($𝓮𝔁𝓽𝓻𝓪_𝓭𝓮𝓯𝓲𝓷𝓮𝓼:tt)*
        }
      ) => {
        𝖋𝖎𝖑𝖙𝖊𝖗_𝖗𝖎𝖘𝖈𝖛_𝖒𝖆𝖗𝖐𝖊𝖗𝖘! {
            𝖉𝖊𝖋𝖎𝖓𝖊_𝖗𝖎𝖘𝖈𝖛_𝖆𝖘𝖘𝖊𝖒𝖇𝖑𝖊𝖗_𝖙𝖗𝖆𝖎𝖙! {
                $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓻𝓮𝓼𝓽𝓻𝓲𝓬𝓽𝓲𝓸𝓷𝓼
                pub trait $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓽𝓻𝓪𝓲𝓽_𝓷𝓪𝓶𝓮 𝕀𝕟𝕤𝕥𝕣𝕦𝕔𝕥𝕚𝕠𝕟𝕤𝕀𝕟𝕥𝕖𝕣𝕗𝕒𝕔𝕖[
                where
                    super::𝗿𝗶𝘀𝗰_𝘃::𝗼𝗽𝗲𝗿𝗮𝗻𝗱𝘀::𝐮𝐧𝐟𝐢𝐥𝐥𝐞𝐝_𝐟𝐥𝐮𝐞𝐧𝐭_𝐯𝐚𝐥𝐮𝐞:
                        𝒔𝒐𝒖𝒓𝒄𝒆_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒃𝒂𝒔𝒆<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜> +
                        𝒔𝒐𝒖𝒓𝒄𝒆_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒅𝒊𝒔𝒑<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐢𝐦𝐦𝐞𝐝𝐢𝐚𝐭𝐞> +
                        𝒅𝒆𝒔𝒕𝒊𝒏𝒂𝒕𝒊𝒐𝒏_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒃𝒂𝒔𝒆<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜> +
                        𝒅𝒆𝒔𝒕𝒊𝒏𝒂𝒕𝒊𝒐𝒏_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒅𝒊𝒔𝒑<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐝𝐞𝐬𝐭𝐢𝐧𝐚𝐭𝐢𝐨𝐧_𝐢𝐦𝐦𝐞𝐝𝐢𝐚𝐭𝐞> +
                        𝒑𝒓𝒆𝒇𝒆𝒕𝒄𝒉_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒃𝒂𝒔𝒆<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜> +
                        𝒑𝒓𝒆𝒇𝒆𝒕𝒄𝒉_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒅𝒊𝒔𝒑<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐩𝐫𝐞𝐟𝐞𝐭𝐜𝐡_𝐢𝐦𝐦𝐞𝐝𝐢𝐚𝐭𝐞> +
                        𝒛𝒆𝒓𝒐_𝒐𝒇𝒇𝒔𝒆𝒕_𝒂𝒅𝒅𝒓𝒆𝒔𝒔_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒃𝒂𝒔𝒆<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜>]
                {
                    type 𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜:
                        Into<Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢> +
                        Into<Self::𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜> +
                        Into<Self::𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢> +
                        𝒔𝒐𝒖𝒓𝒄𝒆_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒐𝒑𝒆𝒓𝒂𝒏𝒅<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜> +
                        𝒔𝒐𝒖𝒓𝒄𝒆_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒃𝒂𝒔𝒆<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜> +
                        𝒅𝒆𝒔𝒕𝒊𝒏𝒂𝒕𝒊𝒐𝒏_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒐𝒑𝒆𝒓𝒂𝒏𝒅<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜> +
                        𝒅𝒆𝒔𝒕𝒊𝒏𝒂𝒕𝒊𝒐𝒏_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒃𝒂𝒔𝒆<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜> +
                        𝒄𝒔𝒓_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒐𝒑𝒆𝒓𝒂𝒏𝒅<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜> +
                        𝒑𝒓𝒆𝒇𝒆𝒕𝒄𝒉_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒃𝒂𝒔𝒆<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜> +
                        𝒔𝒉𝒊𝒇𝒕_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒐𝒑𝒆𝒓𝒂𝒏𝒅<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜> +
                        𝒛𝒆𝒓𝒐_𝒐𝒇𝒇𝒔𝒆𝒕_𝒂𝒅𝒅𝒓𝒆𝒔𝒔_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒃𝒂𝒔𝒆<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜>;

                    type 𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢:
                        Into<Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜> +
                        Into<Self::𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜> +
                        Into<Self::𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢> +
                        𝒔𝒐𝒖𝒓𝒄𝒆_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒐𝒑𝒆𝒓𝒂𝒏𝒅<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜> +
                        𝒔𝒐𝒖𝒓𝒄𝒆_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒃𝒂𝒔𝒆<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜> +
                        𝒄𝒔𝒓_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒐𝒑𝒆𝒓𝒂𝒏𝒅<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜> +
                        𝒅𝒆𝒔𝒕𝒊𝒏𝒂𝒕𝒊𝒐𝒏_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒐𝒑𝒆𝒓𝒂𝒏𝒅<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜> +
                        𝒅𝒆𝒔𝒕𝒊𝒏𝒂𝒕𝒊𝒐𝒏_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒃𝒂𝒔𝒆<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜> +
                        𝒑𝒓𝒆𝒇𝒆𝒕𝒄𝒉_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒃𝒂𝒔𝒆<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜> +
                        𝒔𝒉𝒊𝒇𝒕_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒐𝒑𝒆𝒓𝒂𝒏𝒅<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜> +
                        𝒛𝒆𝒓𝒐_𝒐𝒇𝒇𝒔𝒆𝒕_𝒂𝒅𝒅𝒓𝒆𝒔𝒔_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒃𝒂𝒔𝒆<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜>;

                    type 𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜:
                        Default +
                        TryInto<Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜> +
                        TryInto<Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢> +
                        Into<Self::𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢> +
                        𝒔𝒐𝒖𝒓𝒄𝒆_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒐𝒑𝒆𝒓𝒂𝒏𝒅<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜> +
                        𝒔𝒐𝒖𝒓𝒄𝒆_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒃𝒂𝒔𝒆<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜> +
                        𝒄𝒔𝒓_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒐𝒑𝒆𝒓𝒂𝒏𝒅<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜> +
                        𝒅𝒆𝒔𝒕𝒊𝒏𝒂𝒕𝒊𝒐𝒏_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒐𝒑𝒆𝒓𝒂𝒏𝒅<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜> +
                        𝒅𝒆𝒔𝒕𝒊𝒏𝒂𝒕𝒊𝒐𝒏_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒃𝒂𝒔𝒆<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜> +
                        𝒑𝒓𝒆𝒇𝒆𝒕𝒄𝒉_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒃𝒂𝒔𝒆<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜> +
                        𝒔𝒉𝒊𝒇𝒕_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒐𝒑𝒆𝒓𝒂𝒏𝒅<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜> +
                        𝒛𝒆𝒓𝒐_𝒐𝒇𝒇𝒔𝒆𝒕_𝒂𝒅𝒅𝒓𝒆𝒔𝒔_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒃𝒂𝒔𝒆<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜>;

                    type 𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢:
                        Default +
                        TryInto<Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜> +
                        TryInto<Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢> +
                        Into<Self::𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜> +
                        𝒔𝒐𝒖𝒓𝒄𝒆_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒐𝒑𝒆𝒓𝒂𝒏𝒅<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜> +
                        𝒔𝒐𝒖𝒓𝒄𝒆_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒃𝒂𝒔𝒆<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜> +
                        𝒄𝒔𝒓_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒐𝒑𝒆𝒓𝒂𝒏𝒅<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜> +
                        𝒅𝒆𝒔𝒕𝒊𝒏𝒂𝒕𝒊𝒐𝒏_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒐𝒑𝒆𝒓𝒂𝒏𝒅<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜> +
                        𝒅𝒆𝒔𝒕𝒊𝒏𝒂𝒕𝒊𝒐𝒏_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒃𝒂𝒔𝒆<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜> +
                        𝒑𝒓𝒆𝒇𝒆𝒕𝒄𝒉_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒃𝒂𝒔𝒆<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜> +
                        𝒔𝒉𝒊𝒇𝒕_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒐𝒑𝒆𝒓𝒂𝒏𝒅<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜> +
                        𝒛𝒆𝒓𝒐_𝒐𝒇𝒇𝒔𝒆𝒕_𝒂𝒅𝒅𝒓𝒆𝒔𝒔_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒃𝒂𝒔𝒆<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜>;

                    type 𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜:
                        Into<Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢> +
                        𝒔𝒐𝒖𝒓𝒄𝒆_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒐𝒑𝒆𝒓𝒂𝒏𝒅<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜> +
                        𝒅𝒆𝒔𝒕𝒊𝒏𝒂𝒕𝒊𝒐𝒏_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒐𝒑𝒆𝒓𝒂𝒏𝒅<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜>;

                    type 𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢:
                        Into<Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜> +
                        𝒔𝒐𝒖𝒓𝒄𝒆_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒐𝒑𝒆𝒓𝒂𝒏𝒅<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜> +
                        𝒅𝒆𝒔𝒕𝒊𝒏𝒂𝒕𝒊𝒐𝒏_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒐𝒑𝒆𝒓𝒂𝒏𝒅<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜>;

                    type 𝐫𝐨𝐮𝐧𝐝𝐢𝐧𝐠_𝐦𝐨𝐝𝐞:
                        𝒔𝒐𝒖𝒓𝒄𝒆_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒐𝒑𝒆𝒓𝒂𝒏𝒅<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐫𝐨𝐮𝐧𝐝𝐢𝐧𝐠_𝐦𝐨𝐝𝐞>;

                    type 𝐟𝐞𝐧𝐜𝐞:
                        𝒔𝒐𝒖𝒓𝒄𝒆_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒐𝒑𝒆𝒓𝒂𝒏𝒅<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐟𝐞𝐧𝐜𝐞>;

                    type 𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫:
                        𝒔𝒐𝒖𝒓𝒄𝒆_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒐𝒑𝒆𝒓𝒂𝒏𝒅<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫>;

                    type 𝐢𝐦𝐦𝐞𝐝𝐢𝐚𝐭𝐞:
                        Default +
                        𝒔𝒐𝒖𝒓𝒄𝒆_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒐𝒑𝒆𝒓𝒂𝒏𝒅<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐢𝐦𝐦𝐞𝐝𝐢𝐚𝐭𝐞> +
                        𝒔𝒐𝒖𝒓𝒄𝒆_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒅𝒊𝒔𝒑<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐢𝐦𝐦𝐞𝐝𝐢𝐚𝐭𝐞> +
                        𝒅𝒆𝒔𝒕𝒊𝒏𝒂𝒕𝒊𝒐𝒏_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒐𝒑𝒆𝒓𝒂𝒏𝒅<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐝𝐞𝐬𝐭𝐢𝐧𝐚𝐭𝐢𝐨𝐧_𝐢𝐦𝐦𝐞𝐝𝐢𝐚𝐭𝐞> +
                        𝒅𝒆𝒔𝒕𝒊𝒏𝒂𝒕𝒊𝒐𝒏_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒅𝒊𝒔𝒑<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐝𝐞𝐬𝐭𝐢𝐧𝐚𝐭𝐢𝐨𝐧_𝐢𝐦𝐦𝐞𝐝𝐢𝐚𝐭𝐞>;

                    type 𝐮𝐩𝐩𝐞𝐫_𝐢𝐦𝐦𝐞𝐝𝐢𝐚𝐭𝐞:
                        Default +
                        𝒔𝒐𝒖𝒓𝒄𝒆_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒐𝒑𝒆𝒓𝒂𝒏𝒅<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐮𝐩𝐩𝐞𝐫_𝐢𝐦𝐦𝐞𝐝𝐢𝐚𝐭𝐞> +
                        𝒔𝒐𝒖𝒓𝒄𝒆_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒅𝒊𝒔𝒑<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐮𝐩𝐩𝐞𝐫_𝐢𝐦𝐦𝐞𝐝𝐢𝐚𝐭𝐞>;

                    type 𝐝𝐞𝐬𝐭𝐢𝐧𝐚𝐭𝐢𝐨𝐧_𝐢𝐦𝐦𝐞𝐝𝐢𝐚𝐭𝐞:
                        Default +
                        𝒔𝒐𝒖𝒓𝒄𝒆_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒐𝒑𝒆𝒓𝒂𝒏𝒅<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐢𝐦𝐦𝐞𝐝𝐢𝐚𝐭𝐞> +
                        𝒅𝒆𝒔𝒕𝒊𝒏𝒂𝒕𝒊𝒐𝒏_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒐𝒑𝒆𝒓𝒂𝒏𝒅<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐝𝐞𝐬𝐭𝐢𝐧𝐚𝐭𝐢𝐨𝐧_𝐢𝐦𝐦𝐞𝐝𝐢𝐚𝐭𝐞> +
                        𝒅𝒆𝒔𝒕𝒊𝒏𝒂𝒕𝒊𝒐𝒏_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒅𝒊𝒔𝒑<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐝𝐞𝐬𝐭𝐢𝐧𝐚𝐭𝐢𝐨𝐧_𝐢𝐦𝐦𝐞𝐝𝐢𝐚𝐭𝐞>;

                    type 𝐛𝐫𝐚𝐧𝐜𝐡_𝐢𝐦𝐦𝐞𝐝𝐢𝐚𝐭𝐞:
                        Default +
                        𝒅𝒆𝒔𝒕𝒊𝒏𝒂𝒕𝒊𝒐𝒏_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒐𝒑𝒆𝒓𝒂𝒏𝒅<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐛𝐫𝐚𝐧𝐜𝐡_𝐢𝐦𝐦𝐞𝐝𝐢𝐚𝐭𝐞> +
                        𝒅𝒆𝒔𝒕𝒊𝒏𝒂𝒕𝒊𝒐𝒏_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒅𝒊𝒔𝒑<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐛𝐫𝐚𝐧𝐜𝐡_𝐢𝐦𝐦𝐞𝐝𝐢𝐚𝐭𝐞>;

                    type 𝐣𝐮𝐦𝐩_𝐢𝐦𝐦𝐞𝐝𝐢𝐚𝐭𝐞:
                        Default +
                        𝒔𝒐𝒖𝒓𝒄𝒆_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒐𝒑𝒆𝒓𝒂𝒏𝒅<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐣𝐮𝐦𝐩_𝐢𝐦𝐦𝐞𝐝𝐢𝐚𝐭𝐞> +
                        𝒔𝒐𝒖𝒓𝒄𝒆_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒅𝒊𝒔𝒑<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐣𝐮𝐦𝐩_𝐢𝐦𝐦𝐞𝐝𝐢𝐚𝐭𝐞>;

                    type 𝐜𝐬𝐫_𝐢𝐦𝐦𝐞𝐝𝐢𝐚𝐭𝐞:
                        Default +
                        𝒄𝒔𝒓_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒐𝒑𝒆𝒓𝒂𝒏𝒅<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐜𝐬𝐫_𝐢𝐦𝐦𝐞𝐝𝐢𝐚𝐭𝐞>;

                    type 𝐩𝐫𝐞𝐟𝐞𝐭𝐜𝐡_𝐢𝐦𝐦𝐞𝐝𝐢𝐚𝐭𝐞:
                        Default +
                        𝒔𝒐𝒖𝒓𝒄𝒆_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒐𝒑𝒆𝒓𝒂𝒏𝒅<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐢𝐦𝐦𝐞𝐝𝐢𝐚𝐭𝐞> +
                        𝒔𝒐𝒖𝒓𝒄𝒆_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒅𝒊𝒔𝒑<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐢𝐦𝐦𝐞𝐝𝐢𝐚𝐭𝐞> +
                        𝒅𝒆𝒔𝒕𝒊𝒏𝒂𝒕𝒊𝒐𝒏_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒐𝒑𝒆𝒓𝒂𝒏𝒅<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐝𝐞𝐬𝐭𝐢𝐧𝐚𝐭𝐢𝐨𝐧_𝐢𝐦𝐦𝐞𝐝𝐢𝐚𝐭𝐞> +
                        𝒅𝒆𝒔𝒕𝒊𝒏𝒂𝒕𝒊𝒐𝒏_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒅𝒊𝒔𝒑<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐝𝐞𝐬𝐭𝐢𝐧𝐚𝐭𝐢𝐨𝐧_𝐢𝐦𝐦𝐞𝐝𝐢𝐚𝐭𝐞> +
                        𝒑𝒓𝒆𝒇𝒆𝒕𝒄𝒉_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒅𝒊𝒔𝒑<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐩𝐫𝐞𝐟𝐞𝐭𝐜𝐡_𝐢𝐦𝐦𝐞𝐝𝐢𝐚𝐭𝐞>;

                    type 𝐬𝐡𝐢𝐟𝐭_𝐢𝐦𝐦𝐞𝐝𝐢𝐚𝐭𝐞:
                        Default +
                        𝒔𝒐𝒖𝒓𝒄𝒆_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒐𝒑𝒆𝒓𝒂𝒏𝒅<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐢𝐦𝐦𝐞𝐝𝐢𝐚𝐭𝐞> +
                        𝒅𝒆𝒔𝒕𝒊𝒏𝒂𝒕𝒊𝒐𝒏_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒐𝒑𝒆𝒓𝒂𝒏𝒅<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐝𝐞𝐬𝐭𝐢𝐧𝐚𝐭𝐢𝐨𝐧_𝐢𝐦𝐦𝐞𝐝𝐢𝐚𝐭𝐞> +
                        𝒔𝒉𝒊𝒇𝒕_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒐𝒑𝒆𝒓𝒂𝒏𝒅<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐬𝐡𝐢𝐟𝐭_𝐢𝐦𝐦𝐞𝐝𝐢𝐚𝐭𝐞>;

            Ξ𝔯𝔳64[  type 𝐰𝐨𝐫𝐝_𝐬𝐡𝐢𝐟𝐭_𝐢𝐦𝐦𝐞𝐝𝐢𝐚𝐭𝐞:
                        Default +
                        𝒔𝒐𝒖𝒓𝒄𝒆_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒐𝒑𝒆𝒓𝒂𝒏𝒅<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐢𝐦𝐦𝐞𝐝𝐢𝐚𝐭𝐞> +
                        𝒅𝒆𝒔𝒕𝒊𝒏𝒂𝒕𝒊𝒐𝒏_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒐𝒑𝒆𝒓𝒂𝒏𝒅<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐝𝐞𝐬𝐭𝐢𝐧𝐚𝐭𝐢𝐨𝐧_𝐢𝐦𝐦𝐞𝐝𝐢𝐚𝐭𝐞> +
                        𝒔𝒉𝒊𝒇𝒕_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒐𝒑𝒆𝒓𝒂𝒏𝒅<Self, 𝐭𝐚𝐫𝐠𝐞𝐭 = Self::𝐰𝐨𝐫𝐝_𝐬𝐡𝐢𝐟𝐭_𝐢𝐦𝐦𝐞𝐝𝐢𝐚𝐭𝐞>;]

                    const 𝔵0: Self::𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;
                    const 𝔵1: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;
                    const 𝔵2: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;
                    const 𝔵3: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;
                    const 𝔵4: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;
                    const 𝔵5: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;
                    const 𝔵6: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;
                    const 𝔵7: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;
                    const 𝔵8: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;
                    const 𝔵9: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;
                    const 𝔵10: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;
                    const 𝔵11: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;
                    const 𝔵12: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;
                    const 𝔵13: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;
                    const 𝔵14: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;
                    const 𝔵15: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;
            Χ𝔯𝔳32𝔢[ const 𝔵16: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;
                    const 𝔵17: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;
                    const 𝔵18: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;
                    const 𝔵19: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;
                    const 𝔵20: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;
                    const 𝔵21: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;
                    const 𝔵22: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;
                    const 𝔵23: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;
                    const 𝔵24: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;
                    const 𝔵25: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;
                    const 𝔵26: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;
                    const 𝔵27: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;
                    const 𝔵28: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;
                    const 𝔵29: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;
                    const 𝔵30: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;
                    const 𝔵31: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;]

                    const 𝔷𝔢𝔯𝔬: Self::𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔞0: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔞1: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔞2: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔞3: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
            Ξ𝔲𝔞𝔟𝔦[  const 𝔞4: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔞5: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔞6: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔞7: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;]
                    const 𝔣𝔭: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔤𝔭: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔯𝔞: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔰0: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔰1: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔰2: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔰3: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔰4: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
            Χ𝔯𝔳32𝔢[ const 𝔰5: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔰6: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔰7: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔰8: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔰9: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔰10: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔰11: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
            Ξ𝔢𝔞𝔟𝔦[  const 𝔰12: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔰13: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔰14: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔰15: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔰16: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔰17: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔰18: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔰19: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔰20: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;]]
                    const 𝔰𝔭: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔱0: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔱1: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
            Ξ𝔲𝔞𝔟𝔦[  const 𝔱2: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔱3: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔱4: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔱5: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔱6: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;]
                    const 𝔱𝔭: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;

                    const 𝔣0: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;
                    const 𝔣1: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;
                    const 𝔣2: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;
                    const 𝔣3: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;
                    const 𝔣4: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;
                    const 𝔣5: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;
                    const 𝔣6: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;
                    const 𝔣7: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;
                    const 𝔣8: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;
                    const 𝔣9: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;
                    const 𝔣10: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;
                    const 𝔣11: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;
                    const 𝔣12: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;
                    const 𝔣13: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;
                    const 𝔣14: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;
                    const 𝔣15: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;
                    const 𝔣16: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;
                    const 𝔣17: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;
                    const 𝔣18: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;
                    const 𝔣19: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;
                    const 𝔣20: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;
                    const 𝔣21: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;
                    const 𝔣22: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;
                    const 𝔣23: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;
                    const 𝔣24: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;
                    const 𝔣25: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;
                    const 𝔣26: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;
                    const 𝔣27: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;
                    const 𝔣28: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;
                    const 𝔣29: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;
                    const 𝔣30: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;
                    const 𝔣31: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;

                    const 𝔣𝔞0: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔣𝔞1: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔣𝔞2: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔣𝔞3: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔣𝔞4: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔣𝔞5: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔣𝔞6: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔣𝔞7: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔣𝔰0: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔣𝔰1: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔣𝔰2: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔣𝔰3: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔣𝔰4: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔣𝔰5: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔣𝔰6: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔣𝔰7: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔣𝔰8: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔣𝔰9: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔣𝔰10: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔣𝔰11: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔣𝔱0: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔣𝔱1: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔣𝔱2: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔣𝔱3: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔣𝔱4: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔣𝔱5: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔣𝔱6: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔣𝔱7: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔣𝔱8: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔣𝔱9: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔣𝔱10: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;
                    const 𝔣𝔱11: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;

                    const 𝔯𝔫𝔢: Self::𝐫𝐨𝐮𝐧𝐝𝐢𝐧𝐠_𝐦𝐨𝐝𝐞;
                    const 𝔯𝔱𝔷: Self::𝐫𝐨𝐮𝐧𝐝𝐢𝐧𝐠_𝐦𝐨𝐝𝐞;
                    const 𝔯𝔡𝔫: Self::𝐫𝐨𝐮𝐧𝐝𝐢𝐧𝐠_𝐦𝐨𝐝𝐞;
                    const 𝔯𝔲𝔭: Self::𝐫𝐨𝐮𝐧𝐝𝐢𝐧𝐠_𝐦𝐨𝐝𝐞;
                    const 𝔯𝔪𝔪: Self::𝐫𝐨𝐮𝐧𝐝𝐢𝐧𝐠_𝐦𝐨𝐝𝐞;
                    const 𝔡𝔶𝔫: Self::𝐫𝐨𝐮𝐧𝐝𝐢𝐧𝐠_𝐦𝐨𝐝𝐞;

                    const 𝔴: Self::𝐟𝐞𝐧𝐜𝐞;
                    const 𝔯: Self::𝐟𝐞𝐧𝐜𝐞;
                    const 𝔯𝔴: Self::𝐟𝐞𝐧𝐜𝐞;
                    const 𝔬: Self::𝐟𝐞𝐧𝐜𝐞;
                    const 𝔬𝔴: Self::𝐟𝐞𝐧𝐜𝐞;
                    const 𝔬𝔯: Self::𝐟𝐞𝐧𝐜𝐞;
                    const 𝔬𝔯𝔴: Self::𝐟𝐞𝐧𝐜𝐞;
                    const 𝔦: Self::𝐟𝐞𝐧𝐜𝐞;
                    const 𝔦𝔴: Self::𝐟𝐞𝐧𝐜𝐞;
                    const 𝔦𝔯: Self::𝐟𝐞𝐧𝐜𝐞;
                    const 𝔦𝔯𝔴: Self::𝐟𝐞𝐧𝐜𝐞;
                    const 𝔦𝔬: Self::𝐟𝐞𝐧𝐜𝐞;
                    const 𝔦𝔬𝔴: Self::𝐟𝐞𝐧𝐜𝐞;
                    const 𝔦𝔬𝔯: Self::𝐟𝐞𝐧𝐜𝐞;
                    const 𝔦𝔬𝔯𝔴: Self::𝐟𝐞𝐧𝐜𝐞;

                    const 𝔣𝔣𝔩𝔞𝔤𝔰: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔣𝔯𝔪: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔣𝔠𝔰𝔯: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔰𝔰𝔱𝔞𝔱𝔲𝔰: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔰𝔦𝔢: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔰𝔱𝔳𝔢𝔠: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔰𝔠𝔬𝔲𝔫𝔱𝔢𝔯𝔢𝔫: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔰𝔢𝔫𝔳𝔠𝔣𝔤: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔰𝔰𝔠𝔯𝔞𝔱𝔠𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔰𝔢𝔭𝔠: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔰𝔠𝔞𝔲𝔰𝔢: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔰𝔱𝔳𝔞𝔩: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔰𝔦𝔭: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔰𝔞𝔱𝔭: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔳𝔰𝔰𝔱𝔞𝔱𝔲𝔰: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔳𝔰𝔦𝔢: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔳𝔰𝔱𝔳𝔢𝔠: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔳𝔰𝔰𝔠𝔯𝔞𝔱𝔠𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔳𝔰𝔢𝔭𝔠: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔳𝔰𝔠𝔞𝔲𝔰𝔢: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔳𝔰𝔱𝔳𝔞𝔩: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔳𝔰𝔦𝔭: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔳𝔰𝔞𝔱𝔭: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔰𝔱𝔞𝔱𝔲𝔰: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔦𝔰𝔞: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔢𝔡𝔢𝔩𝔢𝔤: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔦𝔡𝔢𝔩𝔢𝔤: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔦𝔢: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔱𝔳𝔢𝔠: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯𝔢𝔫: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔢𝔫𝔳𝔠𝔣𝔤: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
            Ξ𝔯𝔳32[  const 𝔪𝔰𝔱𝔞𝔱𝔲𝔰𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔢𝔫𝔳𝔠𝔣𝔤𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;]
                    const 𝔪𝔠𝔬𝔲𝔫𝔱𝔦𝔫𝔥𝔦𝔟𝔦𝔱: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱3: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱4: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱5: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱6: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱7: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱8: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱9: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱10: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱11: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱12: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱13: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱14: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱15: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱16: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱17: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱18: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱19: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱20: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱21: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱22: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱23: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱24: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱25: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱26: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱27: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱28: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱29: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱30: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱31: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔰𝔠𝔯𝔞𝔱𝔠𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔢𝔭𝔠: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔠𝔞𝔲𝔰𝔢: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔱𝔳𝔞𝔩: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔦𝔭: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔱𝔦𝔫𝔰𝔱: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔱𝔳𝔞𝔩2: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔭𝔪𝔭𝔠𝔣𝔤0: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
            Ξ𝔯𝔳32[  const 𝔭𝔪𝔭𝔠𝔣𝔤1: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;]
                    const 𝔭𝔪𝔭𝔠𝔣𝔤2: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
            Ξ𝔯𝔳32[  const 𝔭𝔪𝔭𝔠𝔣𝔤3: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;]
                    const 𝔭𝔪𝔭𝔠𝔣𝔤4: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
            Ξ𝔯𝔳32[  const 𝔭𝔪𝔭𝔠𝔣𝔤5: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;]
                    const 𝔭𝔪𝔭𝔠𝔣𝔤6: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
            Ξ𝔯𝔳32[  const 𝔭𝔪𝔭𝔠𝔣𝔤7: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;]
                    const 𝔭𝔪𝔭𝔠𝔣𝔤8: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
            Ξ𝔯𝔳32[  const 𝔭𝔪𝔭𝔠𝔣𝔤9: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;]
                    const 𝔭𝔪𝔭𝔠𝔣𝔤10: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
            Ξ𝔯𝔳32[  const 𝔭𝔪𝔭𝔠𝔣𝔤11: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;]
                    const 𝔭𝔪𝔭𝔠𝔣𝔤12: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
            Ξ𝔯𝔳32[  const 𝔭𝔪𝔭𝔠𝔣𝔤13: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;]
                    const 𝔭𝔪𝔭𝔠𝔣𝔤14: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
            Ξ𝔯𝔳32[  const 𝔭𝔪𝔭𝔠𝔣𝔤15: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;]
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯0: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯1: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯2: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯3: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯4: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯5: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯6: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯7: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯8: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯9: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯10: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯11: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯12: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯13: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯14: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯15: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯16: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯17: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯18: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯19: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯20: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯21: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯22: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯23: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯24: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯25: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯26: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯27: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯28: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯29: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯30: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯31: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯32: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯33: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯34: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯35: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯36: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯37: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯38: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯39: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯40: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯41: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯42: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯43: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯44: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯45: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯46: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯47: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯48: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯49: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯50: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯51: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯52: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯53: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯54: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯55: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯56: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯57: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯58: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯59: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯60: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯61: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯62: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯63: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔰𝔠𝔬𝔫𝔱𝔢𝔵𝔱: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔰𝔱𝔞𝔱𝔲𝔰: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔢𝔡𝔢𝔩𝔢𝔤: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔦𝔡𝔢𝔩𝔢𝔤: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔦𝔢: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔱𝔦𝔪𝔢𝔡𝔢𝔩𝔱𝔞: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔠𝔬𝔲𝔫𝔱𝔢𝔯𝔢𝔫: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔤𝔢𝔦𝔢: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔢𝔫𝔳𝔠𝔣𝔤: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
            Ξ𝔯𝔳32[  const 𝔥𝔱𝔦𝔪𝔢𝔡𝔢𝔩𝔱𝔞𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔢𝔫𝔳𝔠𝔣𝔤𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;]
                    const 𝔥𝔱𝔳𝔞𝔩: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔦𝔭: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔳𝔦𝔭: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔱𝔦𝔫𝔰𝔱: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔰𝔢𝔠𝔠𝔣𝔤: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
            Ξ𝔯𝔳32[  const 𝔪𝔰𝔢𝔠𝔠𝔣𝔤𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;]
                    const 𝔱𝔰𝔢𝔩𝔢𝔠𝔱: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔱𝔡𝔞𝔱𝔞1: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔱𝔡𝔞𝔱𝔞2: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔱𝔡𝔞𝔱𝔞3: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔠𝔬𝔫𝔱𝔢𝔵𝔱: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔡𝔠𝔰𝔯: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔡𝔭𝔠: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔡𝔰𝔠𝔯𝔞𝔱𝔠𝔥0: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔡𝔰𝔠𝔯𝔞𝔱𝔠𝔥1: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔠𝔶𝔠𝔩𝔢: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔦𝔫𝔰𝔱𝔯𝔢𝔱: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯3: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯4: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯5: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯6: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯7: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯8: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯9: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯10: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯11: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯12: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯13: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯14: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯15: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯16: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯17: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯18: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯19: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯20: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯21: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯22: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯23: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯24: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯25: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯26: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯27: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯28: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯29: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯30: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯31: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
            Ξ𝔯𝔳32[  const 𝔪𝔠𝔶𝔠𝔩𝔢𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔦𝔫𝔰𝔱𝔯𝔢𝔱𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯3𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯4𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯5𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯6𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯7𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯8𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯9𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯10𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯11𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯12𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯13𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯14𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯15𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯16𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯17𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯18𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯19𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯20𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯21𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯22𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯23𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯24𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯25𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯26𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯27𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯28𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯29𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯30𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯31𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;]
                    const 𝔠𝔶𝔠𝔩𝔢: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔱𝔦𝔪𝔢: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔦𝔫𝔰𝔱𝔯𝔢𝔱: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯3: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯4: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯5: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯6: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯7: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯8: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯9: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯10: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯11: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯12: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯13: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯14: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯15: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯16: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯17: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯18: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯19: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯20: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯21: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯22: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯23: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯24: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯25: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯26: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯27: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯28: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯29: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯30: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯31: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
            Ξ𝔯𝔳32[  const 𝔠𝔶𝔠𝔩𝔢𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔱𝔦𝔪𝔢𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔦𝔫𝔰𝔱𝔯𝔢𝔱𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯3𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯4𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯5𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯6𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯7𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯8𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯9𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯10𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯11𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯12𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯13𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯14𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯15𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯16𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯17𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯18𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯19𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯20𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯21𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯22𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯23𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯24𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯25𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯26𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯27𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯28𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯29𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯30𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯31𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;]
                    const 𝔥𝔤𝔢𝔦𝔭: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔳𝔢𝔫𝔡𝔬𝔯𝔦𝔡: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔞𝔯𝔠𝔥𝔦𝔡: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔦𝔪𝔭𝔦𝔡: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔥𝔞𝔯𝔱𝔦𝔡: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;
                    const 𝔪𝔠𝔬𝔫𝔣𝔦𝔤𝔭𝔱𝔯: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫;

                    const 𝔞𝔡𝔡𝔯𝔢𝔰𝔰: super::𝗿𝗶𝘀𝗰_𝘃::𝗼𝗽𝗲𝗿𝗮𝗻𝗱𝘀::𝒇𝒍𝒖𝒆𝒏𝒕_𝒂𝒅𝒅𝒓𝒆𝒔𝒔<
                        super::𝗿𝗶𝘀𝗰_𝘃::𝗼𝗽𝗲𝗿𝗮𝗻𝗱𝘀::𝐮𝐧𝐟𝐢𝐥𝐥𝐞𝐝_𝐟𝐥𝐮𝐞𝐧𝐭_𝐯𝐚𝐥𝐮𝐞,
                        super::𝗿𝗶𝘀𝗰_𝘃::𝗼𝗽𝗲𝗿𝗮𝗻𝗱𝘀::𝐮𝐧𝐟𝐢𝐥𝐥𝐞𝐝_𝐟𝐥𝐮𝐞𝐧𝐭_𝐯𝐚𝐥𝐮𝐞
                    > = super::𝗿𝗶𝘀𝗰_𝘃::𝗼𝗽𝗲𝗿𝗮𝗻𝗱𝘀::𝒇𝒍𝒖𝒆𝒏𝒕_𝒂𝒅𝒅𝒓𝒆𝒔𝒔 {
                        𝖻𝖺𝗌𝖾: super::𝗿𝗶𝘀𝗰_𝘃::𝗼𝗽𝗲𝗿𝗮𝗻𝗱𝘀::𝐮𝐧𝐟𝐢𝐥𝐥𝐞𝐝_𝐟𝐥𝐮𝐞𝐧𝐭_𝐯𝐚𝐥𝐮𝐞 {},
                        𝖽𝗂𝗌𝗉: super::𝗿𝗶𝘀𝗰_𝘃::𝗼𝗽𝗲𝗿𝗮𝗻𝗱𝘀::𝐮𝐧𝐟𝐢𝐥𝐥𝐞𝐝_𝐟𝐥𝐮𝐞𝐧𝐭_𝐯𝐚𝐥𝐮𝐞 {},
                    };

                    $($𝓮𝔁𝓽𝓻𝓪_𝓭𝓮𝓯𝓲𝓷𝓮𝓼)*
                }
            }
        }
    };
    ($( $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓻𝓮𝓼𝓽𝓻𝓲𝓬𝓽𝓲𝓸𝓷𝓼:tt
        pub trait $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓽𝓻𝓪𝓲𝓽_𝓷𝓪𝓶𝓮:ident {
           $($𝓮𝔁𝓽𝓻𝓪_𝓭𝓮𝓯𝓲𝓷𝓮𝓼:tt)*
        }
      )*) => {
        $(  𝖉𝖊𝖋𝖎𝖓𝖊_𝖗𝖎𝖘𝖈𝖛_𝖆𝖘𝖘𝖊𝖒𝖇𝖑𝖊𝖗_𝖙𝖗𝖆𝖎𝖙! {
                $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓻𝓮𝓼𝓽𝓻𝓲𝓬𝓽𝓲𝓸𝓷𝓼
                pub trait $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓽𝓻𝓪𝓲𝓽_𝓷𝓪𝓶𝓮 {
                    $($𝓮𝔁𝓽𝓻𝓪_𝓭𝓮𝓯𝓲𝓷𝓮𝓼)*
                }
            }
         )*
    };
    (   $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓻𝓮𝓼𝓽𝓻𝓲𝓬𝓽𝓲𝓸𝓷𝓼:tt
        pub trait $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓽𝓻𝓪𝓲𝓽_𝓷𝓪𝓶𝓮:ident
        $($𝓻𝓮𝓼𝓽𝓻𝓲𝓬𝓽𝓲𝓸𝓷𝓼_𝓪𝓷𝓭_𝓭𝓮𝓯𝓲𝓷𝓮𝓼:tt)*
      ) => {
        #[allow(non_upper_case_globals)]
        pub trait $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓽𝓻𝓪𝓲𝓽_𝓷𝓪𝓶𝓮
        $($𝓻𝓮𝓼𝓽𝓻𝓲𝓬𝓽𝓲𝓸𝓷𝓼_𝓪𝓷𝓭_𝓭𝓮𝓯𝓲𝓷𝓮𝓼)*
    };
}

macro_rules! 𝖉𝖊𝖋𝖎𝖓𝖊_𝖗𝖎𝖘𝖈𝖛_𝖆𝖘𝖘𝖊𝖒𝖇𝖑𝖊𝖗_𝖘𝖙𝖗𝖚𝖈𝖙 {
    // We may define different types of assemblers in the future but for now we only support ones
    // which accept reference to 𝒃𝒚𝒕𝒆_𝒆𝒎𝒊𝒕𝒕𝒆𝒓 and become 𝒃𝒚𝒕𝒆_𝒆𝒎𝒊𝒕𝒕𝒆𝒓's themselves.
    (   $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓻𝓮𝓼𝓽𝓻𝓲𝓬𝓽𝓲𝓸𝓷𝓼:tt
        pub struct $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓷𝓪𝓶𝓮:ident[<𝓮𝓶𝓲𝓽𝓽𝓮𝓻_𝓽𝔂𝓹𝓮: 𝒃𝒚𝒕𝒆_𝒆𝒎𝒊𝒕𝒕𝒆𝒓>] as $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓽𝓻𝓪𝓲𝓽_𝓷𝓪𝓶𝓮:ident {
            $([$($𝓮𝔁𝓽𝓻𝓪_𝓭𝓮𝓬𝓵𝓪𝓻𝓪𝓽𝓲𝓸𝓷𝓼:tt)*] [$($𝓮𝔁𝓽𝓻𝓪_𝓲𝓷𝓲𝓽:tt)*])?
        }
        $($𝓸𝓽𝓱𝓮𝓻_𝓽𝓻𝓪𝓲𝓽𝓼:tt)*
    ) => {
        pub struct $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓷𝓪𝓶𝓮<𝓮𝓶𝓲𝓽𝓽𝓮𝓻_𝓽𝔂𝓹𝓮: 𝒃𝒚𝒕𝒆_𝒆𝒎𝒊𝒕𝒕𝒆𝒓> {
            pub 𝖾𝗆𝗂𝗍𝗍𝖾𝗋: 𝓮𝓶𝓲𝓽𝓽𝓮𝓻_𝓽𝔂𝓹𝓮,
            $($($𝓮𝔁𝓽𝓻𝓪_𝓭𝓮𝓬𝓵𝓪𝓻𝓪𝓽𝓲𝓸𝓷𝓼)*)*
        }

        impl<𝓮𝓶𝓲𝓽𝓽𝓮𝓻_𝓽𝔂𝓹𝓮: 𝒃𝒚𝒕𝒆_𝒆𝒎𝒊𝒕𝒕𝒆𝒓> $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓷𝓪𝓶𝓮<𝓮𝓶𝓲𝓽𝓽𝓮𝓻_𝓽𝔂𝓹𝓮> {
            #[inline(always)]
            pub const fn from(new_emitter: 𝓮𝓶𝓲𝓽𝓽𝓮𝓻_𝓽𝔂𝓹𝓮) -> Self {
                $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓷𝓪𝓶𝓮::<𝓮𝓶𝓲𝓽𝓽𝓮𝓻_𝓽𝔂𝓹𝓮> {
                    𝖾𝗆𝗂𝗍𝗍𝖾𝗋: new_emitter,
                    $($($𝓮𝔁𝓽𝓻𝓪_𝓲𝓷𝓲𝓽)*)*
                }
            }
        }

        impl<𝓮𝓶𝓲𝓽𝓽𝓮𝓻_𝓽𝔂𝓹𝓮: 𝒃𝒚𝒕𝒆_𝒆𝒎𝒊𝒕𝒕𝒆𝒓> $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓷𝓪𝓶𝓮<𝓮𝓶𝓲𝓽𝓽𝓮𝓻_𝓽𝔂𝓹𝓮> {
            #[inline(always)]
            pub fn with<𝓷𝓮𝔀_𝓮𝓶𝓲𝓽𝓽𝓮𝓻_𝓽𝔂𝓹𝓮: 𝒃𝒚𝒕𝒆_𝒆𝒎𝒊𝒕𝒕𝒆𝒓>(
                new_emitter: 𝓷𝓮𝔀_𝓮𝓶𝓲𝓽𝓽𝓮𝓻_𝓽𝔂𝓹𝓮
            ) -> $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓷𝓪𝓶𝓮<𝓷𝓮𝔀_𝓮𝓶𝓲𝓽𝓽𝓮𝓻_𝓽𝔂𝓹𝓮> {
                $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓷𝓪𝓶𝓮::<𝐝𝐮𝐦𝐦𝐲_𝐞𝐦𝐢𝐭𝐭𝐞𝐫>::rebind(new_emitter)
            }
        }

        impl<𝓮𝓶𝓲𝓽𝓽𝓮𝓻_𝓽𝔂𝓹𝓮: 𝒃𝒚𝒕𝒆_𝒆𝒎𝒊𝒕𝒕𝒆𝒓> 𝒓𝒆𝒃𝒊𝒏𝒅_𝒃𝒚𝒕𝒆_𝒆𝒎𝒊𝒕𝒕𝒆𝒓 for $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓷𝓪𝓶𝓮<𝓮𝓶𝓲𝓽𝓽𝓮𝓻_𝓽𝔂𝓹𝓮> {
            type 𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻<𝓷𝓮𝔀_𝓮𝓶𝓲𝓽𝓽𝓮𝓻_𝓽𝔂𝓹𝓮: 𝒃𝒚𝒕𝒆_𝒆𝒎𝒊𝒕𝒕𝒆𝒓> =
                $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓷𝓪𝓶𝓮<𝓷𝓮𝔀_𝓮𝓶𝓲𝓽𝓽𝓮𝓻_𝓽𝔂𝓹𝓮>;
            #[inline(always)]
            fn rebind<𝓷𝓮𝔀_𝓮𝓶𝓲𝓽𝓽𝓮𝓻_𝓽𝔂𝓹𝓮: 𝒃𝒚𝒕𝒆_𝒆𝒎𝒊𝒕𝒕𝒆𝒓>(
                new_emitter: 𝓷𝓮𝔀_𝓮𝓶𝓲𝓽𝓽𝓮𝓻_𝓽𝔂𝓹𝓮
            ) -> $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓷𝓪𝓶𝓮<𝓷𝓮𝔀_𝓮𝓶𝓲𝓽𝓽𝓮𝓻_𝓽𝔂𝓹𝓮> {
                $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓷𝓪𝓶𝓮::<𝓷𝓮𝔀_𝓮𝓶𝓲𝓽𝓽𝓮𝓻_𝓽𝔂𝓹𝓮> {
                    𝖾𝗆𝗂𝗍𝗍𝖾𝗋: new_emitter,
                    $($($𝓮𝔁𝓽𝓻𝓪_𝓲𝓷𝓲𝓽)*)*
                }
            }
        }

        #[doc(hidden)]
        impl<𝓮𝓶𝓲𝓽𝓽𝓮𝓻_𝓽𝔂𝓹𝓮: 𝒃𝒚𝒕𝒆_𝒆𝒎𝒊𝒕𝒕𝒆𝒓> 𝒃𝒚𝒕𝒆_𝒆𝒎𝒊𝒕𝒕𝒆𝒓
        for $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓷𝓪𝓶𝓮<𝓮𝓶𝓲𝓽𝓽𝓮𝓻_𝓽𝔂𝓹𝓮> {
            type 𝐫𝐞𝐬𝐮𝐥𝐭_𝐭𝐲𝐩𝐞 = 𝓮𝓶𝓲𝓽𝓽𝓮𝓻_𝓽𝔂𝓹𝓮::𝐫𝐞𝐬𝐮𝐥𝐭_𝐭𝐲𝐩𝐞;
            type 𝐞𝐫𝐫𝐨𝐫_𝐭𝐲𝐩𝐞 = 𝓮𝓶𝓲𝓽𝓽𝓮𝓻_𝓽𝔂𝓹𝓮::𝐞𝐫𝐫𝐨𝐫_𝐭𝐲𝐩𝐞;
            #[inline(always)]
            fn emit_i8(&mut self, value: i8) -> Result<Self::𝐫𝐞𝐬𝐮𝐥𝐭_𝐭𝐲𝐩𝐞, Self::𝐞𝐫𝐫𝐨𝐫_𝐭𝐲𝐩𝐞> {
                self.𝖾𝗆𝗂𝗍𝗍𝖾𝗋.emit_i8(value)
            }
            #[inline(always)]
            fn emit_u8(&mut self, value: u8) -> Result<Self::𝐫𝐞𝐬𝐮𝐥𝐭_𝐭𝐲𝐩𝐞, Self::𝐞𝐫𝐫𝐨𝐫_𝐭𝐲𝐩𝐞> {
                self.𝖾𝗆𝗂𝗍𝗍𝖾𝗋.emit_u8(value)
            }
            #[inline(always)]
            fn emit_i16(&mut self, value: i16) -> Result<Self::𝐫𝐞𝐬𝐮𝐥𝐭_𝐭𝐲𝐩𝐞, Self::𝐞𝐫𝐫𝐨𝐫_𝐭𝐲𝐩𝐞> {
                self.𝖾𝗆𝗂𝗍𝗍𝖾𝗋.emit_i16(value)
            }
            #[inline(always)]
            fn emit_u16(&mut self, value: u16) -> Result<Self::𝐫𝐞𝐬𝐮𝐥𝐭_𝐭𝐲𝐩𝐞, Self::𝐞𝐫𝐫𝐨𝐫_𝐭𝐲𝐩𝐞> {
                self.𝖾𝗆𝗂𝗍𝗍𝖾𝗋.emit_u16(value)
            }
            #[inline(always)]
            fn emit_i32(&mut self, value: i32) -> Result<Self::𝐫𝐞𝐬𝐮𝐥𝐭_𝐭𝐲𝐩𝐞, Self::𝐞𝐫𝐫𝐨𝐫_𝐭𝐲𝐩𝐞> {
                self.𝖾𝗆𝗂𝗍𝗍𝖾𝗋.emit_i32(value)
            }
            #[inline(always)]
            fn emit_u32(&mut self, value: u32) -> Result<Self::𝐫𝐞𝐬𝐮𝐥𝐭_𝐭𝐲𝐩𝐞, Self::𝐞𝐫𝐫𝐨𝐫_𝐭𝐲𝐩𝐞> {
                self.𝖾𝗆𝗂𝗍𝗍𝖾𝗋.emit_u32(value)
            }
            #[inline(always)]
            fn emit_i64(&mut self, value: i64) -> Result<Self::𝐫𝐞𝐬𝐮𝐥𝐭_𝐭𝐲𝐩𝐞, Self::𝐞𝐫𝐫𝐨𝐫_𝐭𝐲𝐩𝐞> {
                self.𝖾𝗆𝗂𝗍𝗍𝖾𝗋.emit_i64(value)
            }
            #[inline(always)]
            fn emit_u64(&mut self, value: u64) -> Result<Self::𝐫𝐞𝐬𝐮𝐥𝐭_𝐭𝐲𝐩𝐞, Self::𝐞𝐫𝐫𝐨𝐫_𝐭𝐲𝐩𝐞> {
                self.𝖾𝗆𝗂𝗍𝗍𝖾𝗋.emit_u64(value)
            }
        }
        𝖉𝖊𝖋𝖎𝖓𝖊_𝖗𝖎𝖘𝖈𝖛_𝖆𝖘𝖘𝖊𝖒𝖇𝖑𝖊𝖗_𝖘𝖙𝖗𝖚𝖈𝖙! {
            $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓻𝓮𝓼𝓽𝓻𝓲𝓬𝓽𝓲𝓸𝓷𝓼
            impl[<𝓮𝓶𝓲𝓽𝓽𝓮𝓻_𝓽𝔂𝓹𝓮: 𝒃𝒚𝒕𝒆_𝒆𝒎𝒊𝒕𝒕𝒆𝒓>] $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓽𝓻𝓪𝓲𝓽_𝓷𝓪𝓶𝓮
            for $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓷𝓪𝓶𝓮[<𝓮𝓶𝓲𝓽𝓽𝓮𝓻_𝓽𝔂𝓹𝓮>];
            $($𝓸𝓽𝓱𝓮𝓻_𝓽𝓻𝓪𝓲𝓽𝓼)*
        }
    };
    (   $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓻𝓮𝓼𝓽𝓻𝓲𝓬𝓽𝓲𝓸𝓷𝓼:tt
        impl$𝓰𝓮𝓷𝓮𝓻𝓲𝓬_𝓻𝓮𝓼𝓽𝓻𝓲𝓬𝓽𝓲𝓸𝓷𝓼:tt $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓽𝓻𝓪𝓲𝓽_𝓷𝓪𝓶𝓮:ident
        for $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓷𝓪𝓶𝓮:ident$𝓰𝓮𝓷𝓮𝓻𝓲𝓬_𝓹𝓪𝓻𝓪𝓶𝓼:tt;
        $($𝓸𝓽𝓱𝓮𝓻_𝓽𝓻𝓪𝓲𝓽𝓼:tt)*
    ) => {
        𝖋𝖎𝖑𝖙𝖊𝖗_𝖗𝖎𝖘𝖈𝖛_𝖒𝖆𝖗𝖐𝖊𝖗𝖘! {
            𝖉𝖊𝖋𝖎𝖓𝖊_𝖗𝖎𝖘𝖈𝖛_𝖆𝖘𝖘𝖊𝖒𝖇𝖑𝖊𝖗_𝖘𝖙𝖗𝖚𝖈𝖙! {
                $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓻𝓮𝓼𝓽𝓻𝓲𝓬𝓽𝓲𝓸𝓷𝓼
                impl$𝓰𝓮𝓷𝓮𝓻𝓲𝓬_𝓻𝓮𝓼𝓽𝓻𝓲𝓬𝓽𝓲𝓸𝓷𝓼 $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓽𝓻𝓪𝓲𝓽_𝓷𝓪𝓶𝓮
                for $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓷𝓪𝓶𝓮$𝓰𝓮𝓷𝓮𝓻𝓲𝓬_𝓹𝓪𝓻𝓪𝓶𝓼
                {   type 𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::Ξ𝔯𝔳32𝔢[𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜_𝐫𝐯𝟑𝟐𝐞]Χ𝔯𝔳32𝔢[𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜];
                    type 𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::Ξ𝔯𝔳32𝔢[𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐞𝐚𝐛𝐢_𝐫𝐯𝟑𝟐𝐞]Χ𝔯𝔳32𝔢[Ξ𝔢𝔞𝔟𝔦[𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐞𝐚𝐛𝐢]Ξ𝔲𝔞𝔟𝔦[𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐮𝐚𝐛𝐢]];
                    type 𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::Ξ𝔯𝔳32𝔢[𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜_𝐫𝐯𝟑𝟐𝐞]Χ𝔯𝔳32𝔢[𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜];
                    type 𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::Ξ𝔯𝔳32𝔢[𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐞𝐚𝐛𝐢_𝐫𝐯𝟑𝟐𝐞]Χ𝔯𝔳32𝔢[Ξ𝔢𝔞𝔟𝔦[𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐞𝐚𝐛𝐢]Ξ𝔲𝔞𝔟𝔦[𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐮𝐚𝐛𝐢]];

                    type 𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;
                    type 𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢;

                    type 𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::Ξ𝔯𝔳32[𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐫𝐯𝟑𝟐]Ξ𝔯𝔳64[𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐫𝐯𝟔𝟒];

                    type 𝐫𝐨𝐮𝐧𝐝𝐢𝐧𝐠_𝐦𝐨𝐝𝐞 = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝐫𝐨𝐮𝐧𝐝𝐢𝐧𝐠_𝐦𝐨𝐝𝐞;

                    type 𝐟𝐞𝐧𝐜𝐞 = 𝗯𝗮𝘀𝗶𝗰_𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝐟𝐞𝐧𝐜𝐞;

                    type 𝐢𝐦𝐦𝐞𝐝𝐢𝐚𝐭𝐞 = 𝗿𝗶𝘀𝗰_𝘃::𝗶𝗺𝗺𝗲𝗱𝗶𝗮𝘁𝗲𝘀::𝐈_𝐢𝐦𝐦𝐞𝐝𝐢𝐚𝐭𝐞;

                    type 𝐮𝐩𝐩𝐞𝐫_𝐢𝐦𝐦𝐞𝐝𝐢𝐚𝐭𝐞 = 𝗿𝗶𝘀𝗰_𝘃::𝗶𝗺𝗺𝗲𝗱𝗶𝗮𝘁𝗲𝘀::𝐔_𝐢𝐦𝐦𝐞𝐝𝐢𝐚𝐭𝐞;

                    type 𝐝𝐞𝐬𝐭𝐢𝐧𝐚𝐭𝐢𝐨𝐧_𝐢𝐦𝐦𝐞𝐝𝐢𝐚𝐭𝐞 = 𝗿𝗶𝘀𝗰_𝘃::𝗶𝗺𝗺𝗲𝗱𝗶𝗮𝘁𝗲𝘀::𝐒_𝐢𝐦𝐦𝐞𝐝𝐢𝐚𝐭𝐞;

                    type 𝐛𝐫𝐚𝐧𝐜𝐡_𝐢𝐦𝐦𝐞𝐝𝐢𝐚𝐭𝐞 = 𝗿𝗶𝘀𝗰_𝘃::𝗶𝗺𝗺𝗲𝗱𝗶𝗮𝘁𝗲𝘀::𝐁_𝐢𝐦𝐦𝐞𝐝𝐢𝐚𝐭𝐞;

                    type 𝐣𝐮𝐦𝐩_𝐢𝐦𝐦𝐞𝐝𝐢𝐚𝐭𝐞 = 𝗿𝗶𝘀𝗰_𝘃::𝗶𝗺𝗺𝗲𝗱𝗶𝗮𝘁𝗲𝘀::𝐉_𝐢𝐦𝐦𝐞𝐝𝐢𝐚𝐭𝐞;

                    type 𝐜𝐬𝐫_𝐢𝐦𝐦𝐞𝐝𝐢𝐚𝐭𝐞 = 𝗿𝗶𝘀𝗰_𝘃::𝗶𝗺𝗺𝗲𝗱𝗶𝗮𝘁𝗲𝘀::𝐜𝐬𝐫_𝐢𝐦𝐦𝐞𝐝𝐢𝐚𝐭𝐞;

                    type 𝐩𝐫𝐞𝐟𝐞𝐭𝐜𝐡_𝐢𝐦𝐦𝐞𝐝𝐢𝐚𝐭𝐞 = 𝗿𝗶𝘀𝗰_𝘃::𝗶𝗺𝗺𝗲𝗱𝗶𝗮𝘁𝗲𝘀::𝐏_𝐢𝐦𝐦𝐞𝐝𝐢𝐚𝐭𝐞;

                    type 𝐬𝐡𝐢𝐟𝐭_𝐢𝐦𝐦𝐞𝐝𝐢𝐚𝐭𝐞 = 𝗿𝗶𝘀𝗰_𝘃::𝗶𝗺𝗺𝗲𝗱𝗶𝗮𝘁𝗲𝘀::Ξ𝔯𝔳32[𝐬𝐡𝐢𝐟𝐭_𝐑𝐕𝟑𝟐_𝐢𝐦𝐦𝐞𝐝𝐢𝐚𝐭𝐞]Ξ𝔯𝔳64[𝐬𝐡𝐢𝐟𝐭_𝐑𝐕𝟔𝟒_𝐢𝐦𝐦𝐞𝐝𝐢𝐚𝐭𝐞];

            Ξ𝔯𝔳64[  type 𝐰𝐨𝐫𝐝_𝐬𝐡𝐢𝐟𝐭_𝐢𝐦𝐦𝐞𝐝𝐢𝐚𝐭𝐞 = 𝗿𝗶𝘀𝗰_𝘃::𝗶𝗺𝗺𝗲𝗱𝗶𝗮𝘁𝗲𝘀::𝐬𝐡𝐢𝐟𝐭_𝐑𝐕𝟑𝟐_𝐢𝐦𝐦𝐞𝐝𝐢𝐚𝐭𝐞;]

                    const 𝔵0: Self::𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = Self::𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜::𝔵0;
                    const 𝔵1: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜::𝔵1;
                    const 𝔵2: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜::𝔵2;
                    const 𝔵3: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜::𝔵3;
                    const 𝔵4: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜::𝔵4;
                    const 𝔵5: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜::𝔵5;
                    const 𝔵6: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜::𝔵6;
                    const 𝔵7: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜::𝔵7;
                    const 𝔵8: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜::𝔵8;
                    const 𝔵9: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜::𝔵9;
                    const 𝔵10: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜::𝔵10;
                    const 𝔵11: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜::𝔵11;
                    const 𝔵12: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜::𝔵12;
                    const 𝔵13: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜::𝔵13;
                    const 𝔵14: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜::𝔵14;
                    const 𝔵15: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜::𝔵15;
            Χ𝔯𝔳32𝔢[ const 𝔵16: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜::𝔵16;
                    const 𝔵17: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜::𝔵17;
                    const 𝔵18: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜::𝔵18;
                    const 𝔵19: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜::𝔵19;
                    const 𝔵20: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜::𝔵20;
                    const 𝔵21: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜::𝔵21;
                    const 𝔵22: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜::𝔵22;
                    const 𝔵23: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜::𝔵23;
                    const 𝔵24: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜::𝔵24;
                    const 𝔵25: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜::𝔵25;
                    const 𝔵26: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜::𝔵26;
                    const 𝔵27: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜::𝔵27;
                    const 𝔵28: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜::𝔵28;
                    const 𝔵29: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜::𝔵29;
                    const 𝔵30: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜::𝔵30;
                    const 𝔵31: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜::𝔵31;]

                    const 𝔷𝔢𝔯𝔬: Self::𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔷𝔢𝔯𝔬;
                    const 𝔞0: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔞0;
                    const 𝔞1: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔞1;
                    const 𝔞2: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔞2;
                    const 𝔞3: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔞3;
            Ξ𝔲𝔞𝔟𝔦[  const 𝔞4: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔞4;
                    const 𝔞5: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔞5;
                    const 𝔞6: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔞6;
                    const 𝔞7: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔞7;]
                    const 𝔣𝔭: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔰0;
                    const 𝔤𝔭: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔤𝔭;
                    const 𝔯𝔞: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔯𝔞;
                    const 𝔰0: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔰0;
                    const 𝔰1: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔰1;
                    const 𝔰2: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔰2;
                    const 𝔰3: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔰3;
                    const 𝔰4: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔰4;
            Χ𝔯𝔳32𝔢[ const 𝔰5: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔰5;
                    const 𝔰6: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔰6;
                    const 𝔰7: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔰7;
                    const 𝔰8: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔰8;
                    const 𝔰9: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔰9;
                    const 𝔰10: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔰10;
                    const 𝔰11: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔰11;
            Ξ𝔢𝔞𝔟𝔦[  const 𝔰12: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔰12;
                    const 𝔰13: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔰13;
                    const 𝔰14: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔰14;
                    const 𝔰15: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔰15;
                    const 𝔰16: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔰16;
                    const 𝔰17: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔰17;
                    const 𝔰18: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔰18;
                    const 𝔰19: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔰19;
                    const 𝔰20: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔰20;]]
                    const 𝔰𝔭: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔰𝔭;
                    const 𝔱0: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔱0;
                    const 𝔱1: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔱1;
            Ξ𝔲𝔞𝔟𝔦[  const 𝔱2: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔱2;
                    const 𝔱3: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔱3;
                    const 𝔱4: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔱4;
                    const 𝔱5: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔱5;
                    const 𝔱6: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔱6;]
                    const 𝔱𝔭: Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔱𝔭;

                    const 𝔣0: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜::𝔣0;
                    const 𝔣1: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜::𝔣1;
                    const 𝔣2: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜::𝔣2;
                    const 𝔣3: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜::𝔣3;
                    const 𝔣4: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜::𝔣4;
                    const 𝔣5: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜::𝔣5;
                    const 𝔣6: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜::𝔣6;
                    const 𝔣7: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜::𝔣7;
                    const 𝔣8: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜::𝔣8;
                    const 𝔣9: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜::𝔣9;
                    const 𝔣10: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜::𝔣10;
                    const 𝔣11: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜::𝔣11;
                    const 𝔣12: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜::𝔣12;
                    const 𝔣13: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜::𝔣13;
                    const 𝔣14: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜::𝔣14;
                    const 𝔣15: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜::𝔣15;
                    const 𝔣16: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜::𝔣16;
                    const 𝔣17: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜::𝔣17;
                    const 𝔣18: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜::𝔣18;
                    const 𝔣19: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜::𝔣19;
                    const 𝔣20: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜::𝔣20;
                    const 𝔣21: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜::𝔣21;
                    const 𝔣22: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜::𝔣22;
                    const 𝔣23: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜::𝔣23;
                    const 𝔣24: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜::𝔣24;
                    const 𝔣25: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜::𝔣25;
                    const 𝔣26: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜::𝔣26;
                    const 𝔣27: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜::𝔣27;
                    const 𝔣28: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜::𝔣28;
                    const 𝔣29: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜::𝔣29;
                    const 𝔣30: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜::𝔣30;
                    const 𝔣31: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜::𝔣31;

                    const 𝔣𝔞0: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔣𝔞0;
                    const 𝔣𝔞1: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔣𝔞1;
                    const 𝔣𝔞2: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔣𝔞2;
                    const 𝔣𝔞3: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔣𝔞3;
                    const 𝔣𝔞4: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔣𝔞4;
                    const 𝔣𝔞5: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔣𝔞5;
                    const 𝔣𝔞6: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔣𝔞6;
                    const 𝔣𝔞7: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔣𝔞7;
                    const 𝔣𝔰0: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔣𝔰0;
                    const 𝔣𝔰1: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔣𝔰1;
                    const 𝔣𝔰2: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔣𝔰2;
                    const 𝔣𝔰3: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔣𝔰3;
                    const 𝔣𝔰4: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔣𝔰4;
                    const 𝔣𝔰5: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔣𝔰5;
                    const 𝔣𝔰6: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔣𝔰6;
                    const 𝔣𝔰7: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔣𝔰7;
                    const 𝔣𝔰8: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔣𝔰8;
                    const 𝔣𝔰9: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔣𝔰9;
                    const 𝔣𝔰10: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔣𝔰10;
                    const 𝔣𝔰11: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔣𝔰11;
                    const 𝔣𝔱0: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔣𝔱0;
                    const 𝔣𝔱1: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔣𝔱1;
                    const 𝔣𝔱2: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔣𝔱2;
                    const 𝔣𝔱3: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔣𝔱3;
                    const 𝔣𝔱4: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔣𝔱4;
                    const 𝔣𝔱5: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔣𝔱5;
                    const 𝔣𝔱6: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔣𝔱6;
                    const 𝔣𝔱7: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔣𝔱7;
                    const 𝔣𝔱8: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔣𝔱8;
                    const 𝔣𝔱9: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔣𝔱9;
                    const 𝔣𝔱10: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔣𝔱10;
                    const 𝔣𝔱11: Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 = Self::𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢::𝔣𝔱11;

                    const 𝔯𝔫𝔢: Self::𝐫𝐨𝐮𝐧𝐝𝐢𝐧𝐠_𝐦𝐨𝐝𝐞 = Self::𝐫𝐨𝐮𝐧𝐝𝐢𝐧𝐠_𝐦𝐨𝐝𝐞::𝔯𝔫𝔢;
                    const 𝔯𝔱𝔷: Self::𝐫𝐨𝐮𝐧𝐝𝐢𝐧𝐠_𝐦𝐨𝐝𝐞 = Self::𝐫𝐨𝐮𝐧𝐝𝐢𝐧𝐠_𝐦𝐨𝐝𝐞::𝔯𝔱𝔷;
                    const 𝔯𝔡𝔫: Self::𝐫𝐨𝐮𝐧𝐝𝐢𝐧𝐠_𝐦𝐨𝐝𝐞 = Self::𝐫𝐨𝐮𝐧𝐝𝐢𝐧𝐠_𝐦𝐨𝐝𝐞::𝔯𝔡𝔫;
                    const 𝔯𝔲𝔭: Self::𝐫𝐨𝐮𝐧𝐝𝐢𝐧𝐠_𝐦𝐨𝐝𝐞 = Self::𝐫𝐨𝐮𝐧𝐝𝐢𝐧𝐠_𝐦𝐨𝐝𝐞::𝔯𝔲𝔭;
                    const 𝔯𝔪𝔪: Self::𝐫𝐨𝐮𝐧𝐝𝐢𝐧𝐠_𝐦𝐨𝐝𝐞 = Self::𝐫𝐨𝐮𝐧𝐝𝐢𝐧𝐠_𝐦𝐨𝐝𝐞::𝔯𝔪𝔪;
                    const 𝔡𝔶𝔫: Self::𝐫𝐨𝐮𝐧𝐝𝐢𝐧𝐠_𝐦𝐨𝐝𝐞 = Self::𝐫𝐨𝐮𝐧𝐝𝐢𝐧𝐠_𝐦𝐨𝐝𝐞::𝔡𝔶𝔫;

                    const 𝔴: Self::𝐟𝐞𝐧𝐜𝐞 = Self::𝐟𝐞𝐧𝐜𝐞::𝔴;
                    const 𝔯: Self::𝐟𝐞𝐧𝐜𝐞 = Self::𝐟𝐞𝐧𝐜𝐞::𝔯;
                    const 𝔯𝔴: Self::𝐟𝐞𝐧𝐜𝐞 = Self::𝐟𝐞𝐧𝐜𝐞::𝔯𝔴;
                    const 𝔬: Self::𝐟𝐞𝐧𝐜𝐞 = Self::𝐟𝐞𝐧𝐜𝐞::𝔬;
                    const 𝔬𝔴: Self::𝐟𝐞𝐧𝐜𝐞 = Self::𝐟𝐞𝐧𝐜𝐞::𝔬𝔴;
                    const 𝔬𝔯: Self::𝐟𝐞𝐧𝐜𝐞 = Self::𝐟𝐞𝐧𝐜𝐞::𝔬𝔯;
                    const 𝔬𝔯𝔴: Self::𝐟𝐞𝐧𝐜𝐞 = Self::𝐟𝐞𝐧𝐜𝐞::𝔬𝔯𝔴;
                    const 𝔦: Self::𝐟𝐞𝐧𝐜𝐞 = Self::𝐟𝐞𝐧𝐜𝐞::𝔦;
                    const 𝔦𝔴: Self::𝐟𝐞𝐧𝐜𝐞 = Self::𝐟𝐞𝐧𝐜𝐞::𝔦𝔴;
                    const 𝔦𝔯: Self::𝐟𝐞𝐧𝐜𝐞 = Self::𝐟𝐞𝐧𝐜𝐞::𝔦𝔯;
                    const 𝔦𝔯𝔴: Self::𝐟𝐞𝐧𝐜𝐞 = Self::𝐟𝐞𝐧𝐜𝐞::𝔦𝔯𝔴;
                    const 𝔦𝔬: Self::𝐟𝐞𝐧𝐜𝐞 = Self::𝐟𝐞𝐧𝐜𝐞::𝔦𝔬;
                    const 𝔦𝔬𝔴: Self::𝐟𝐞𝐧𝐜𝐞 = Self::𝐟𝐞𝐧𝐜𝐞::𝔦𝔬𝔴;
                    const 𝔦𝔬𝔯: Self::𝐟𝐞𝐧𝐜𝐞 = Self::𝐟𝐞𝐧𝐜𝐞::𝔦𝔬𝔯;
                    const 𝔦𝔬𝔯𝔴: Self::𝐟𝐞𝐧𝐜𝐞 = Self::𝐟𝐞𝐧𝐜𝐞::𝔦𝔬𝔯𝔴;

                    const 𝔣𝔣𝔩𝔞𝔤𝔰: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔣𝔣𝔩𝔞𝔤𝔰;
                    const 𝔣𝔯𝔪: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔣𝔯𝔪;
                    const 𝔣𝔠𝔰𝔯: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔣𝔠𝔰𝔯;
                    const 𝔰𝔰𝔱𝔞𝔱𝔲𝔰: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔰𝔰𝔱𝔞𝔱𝔲𝔰;
                    const 𝔰𝔦𝔢: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔰𝔦𝔢;
                    const 𝔰𝔱𝔳𝔢𝔠: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔰𝔱𝔳𝔢𝔠;
                    const 𝔰𝔠𝔬𝔲𝔫𝔱𝔢𝔯𝔢𝔫: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔰𝔠𝔬𝔲𝔫𝔱𝔢𝔯𝔢𝔫;
                    const 𝔰𝔢𝔫𝔳𝔠𝔣𝔤: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔰𝔢𝔫𝔳𝔠𝔣𝔤;
                    const 𝔰𝔰𝔠𝔯𝔞𝔱𝔠𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔰𝔰𝔠𝔯𝔞𝔱𝔠𝔥;
                    const 𝔰𝔢𝔭𝔠: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔰𝔢𝔭𝔠;
                    const 𝔰𝔠𝔞𝔲𝔰𝔢: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔰𝔠𝔞𝔲𝔰𝔢;
                    const 𝔰𝔱𝔳𝔞𝔩: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔰𝔱𝔳𝔞𝔩;
                    const 𝔰𝔦𝔭: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔰𝔦𝔭;
                    const 𝔰𝔞𝔱𝔭: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔰𝔞𝔱𝔭;
                    const 𝔳𝔰𝔰𝔱𝔞𝔱𝔲𝔰: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔳𝔰𝔰𝔱𝔞𝔱𝔲𝔰;
                    const 𝔳𝔰𝔦𝔢: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔳𝔰𝔦𝔢;
                    const 𝔳𝔰𝔱𝔳𝔢𝔠: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔳𝔰𝔱𝔳𝔢𝔠;
                    const 𝔳𝔰𝔰𝔠𝔯𝔞𝔱𝔠𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔳𝔰𝔰𝔠𝔯𝔞𝔱𝔠𝔥;
                    const 𝔳𝔰𝔢𝔭𝔠: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔳𝔰𝔢𝔭𝔠;
                    const 𝔳𝔰𝔠𝔞𝔲𝔰𝔢: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔳𝔰𝔠𝔞𝔲𝔰𝔢;
                    const 𝔳𝔰𝔱𝔳𝔞𝔩: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔳𝔰𝔱𝔳𝔞𝔩;
                    const 𝔳𝔰𝔦𝔭: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔳𝔰𝔦𝔭;
                    const 𝔳𝔰𝔞𝔱𝔭: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔳𝔰𝔞𝔱𝔭;
                    const 𝔪𝔰𝔱𝔞𝔱𝔲𝔰: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔰𝔱𝔞𝔱𝔲𝔰;
                    const 𝔪𝔦𝔰𝔞: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔦𝔰𝔞;
                    const 𝔪𝔢𝔡𝔢𝔩𝔢𝔤: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔢𝔡𝔢𝔩𝔢𝔤;
                    const 𝔪𝔦𝔡𝔢𝔩𝔢𝔤: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔦𝔡𝔢𝔩𝔢𝔤;
                    const 𝔪𝔦𝔢: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔦𝔢;
                    const 𝔪𝔱𝔳𝔢𝔠: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔱𝔳𝔢𝔠;
                    const 𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯𝔢𝔫: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯𝔢𝔫;
                    const 𝔪𝔢𝔫𝔳𝔠𝔣𝔤: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔢𝔫𝔳𝔠𝔣𝔤;
            Ξ𝔯𝔳32[  const 𝔪𝔰𝔱𝔞𝔱𝔲𝔰𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔰𝔱𝔞𝔱𝔲𝔰𝔥;
                    const 𝔪𝔢𝔫𝔳𝔠𝔣𝔤𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔢𝔫𝔳𝔠𝔣𝔤𝔥;]
                    const 𝔪𝔠𝔬𝔲𝔫𝔱𝔦𝔫𝔥𝔦𝔟𝔦𝔱: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔠𝔬𝔲𝔫𝔱𝔦𝔫𝔥𝔦𝔟𝔦𝔱;
                    const 𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱3: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱3;
                    const 𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱4: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱4;
                    const 𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱5: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱5;
                    const 𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱6: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱6;
                    const 𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱7: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱7;
                    const 𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱8: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱8;
                    const 𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱9: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱9;
                    const 𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱10: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱10;
                    const 𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱11: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱11;
                    const 𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱12: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱12;
                    const 𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱13: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱13;
                    const 𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱14: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱14;
                    const 𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱15: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱15;
                    const 𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱16: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱16;
                    const 𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱17: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱17;
                    const 𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱18: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱18;
                    const 𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱19: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱19;
                    const 𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱20: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱20;
                    const 𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱21: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱21;
                    const 𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱22: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱22;
                    const 𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱23: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱23;
                    const 𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱24: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱24;
                    const 𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱25: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱25;
                    const 𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱26: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱26;
                    const 𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱27: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱27;
                    const 𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱28: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱28;
                    const 𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱29: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱29;
                    const 𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱30: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱30;
                    const 𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱31: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔢𝔳𝔢𝔫𝔱31;
                    const 𝔪𝔰𝔠𝔯𝔞𝔱𝔠𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔰𝔠𝔯𝔞𝔱𝔠𝔥;
                    const 𝔪𝔢𝔭𝔠: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔢𝔭𝔠;
                    const 𝔪𝔠𝔞𝔲𝔰𝔢: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔠𝔞𝔲𝔰𝔢;
                    const 𝔪𝔱𝔳𝔞𝔩: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔱𝔳𝔞𝔩;
                    const 𝔪𝔦𝔭: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔦𝔭;
                    const 𝔪𝔱𝔦𝔫𝔰𝔱: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔱𝔦𝔫𝔰𝔱;
                    const 𝔪𝔱𝔳𝔞𝔩2: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔱𝔳𝔞𝔩2;
                    const 𝔭𝔪𝔭𝔠𝔣𝔤0: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔠𝔣𝔤0;
            Ξ𝔯𝔳32[  const 𝔭𝔪𝔭𝔠𝔣𝔤1: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔠𝔣𝔤1;]
                    const 𝔭𝔪𝔭𝔠𝔣𝔤2: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔠𝔣𝔤2;
            Ξ𝔯𝔳32[  const 𝔭𝔪𝔭𝔠𝔣𝔤3: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔠𝔣𝔤3;]
                    const 𝔭𝔪𝔭𝔠𝔣𝔤4: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔠𝔣𝔤4;
            Ξ𝔯𝔳32[  const 𝔭𝔪𝔭𝔠𝔣𝔤5: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔠𝔣𝔤5;]
                    const 𝔭𝔪𝔭𝔠𝔣𝔤6: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔠𝔣𝔤6;
            Ξ𝔯𝔳32[  const 𝔭𝔪𝔭𝔠𝔣𝔤7: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔠𝔣𝔤7;]
                    const 𝔭𝔪𝔭𝔠𝔣𝔤8: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔠𝔣𝔤8;
            Ξ𝔯𝔳32[  const 𝔭𝔪𝔭𝔠𝔣𝔤9: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔠𝔣𝔤9;]
                    const 𝔭𝔪𝔭𝔠𝔣𝔤10: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔠𝔣𝔤10;
            Ξ𝔯𝔳32[  const 𝔭𝔪𝔭𝔠𝔣𝔤11: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔠𝔣𝔤11;]
                    const 𝔭𝔪𝔭𝔠𝔣𝔤12: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔠𝔣𝔤12;
            Ξ𝔯𝔳32[  const 𝔭𝔪𝔭𝔠𝔣𝔤13: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔠𝔣𝔤13;]
                    const 𝔭𝔪𝔭𝔠𝔣𝔤14: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔠𝔣𝔤14;
            Ξ𝔯𝔳32[  const 𝔭𝔪𝔭𝔠𝔣𝔤15: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔠𝔣𝔤15;]
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯0: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔞𝔡𝔡𝔯0;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯1: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔞𝔡𝔡𝔯1;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯2: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔞𝔡𝔡𝔯2;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯3: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔞𝔡𝔡𝔯3;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯4: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔞𝔡𝔡𝔯4;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯5: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔞𝔡𝔡𝔯5;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯6: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔞𝔡𝔡𝔯6;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯7: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔞𝔡𝔡𝔯7;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯8: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔞𝔡𝔡𝔯8;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯9: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔞𝔡𝔡𝔯9;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯10: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔞𝔡𝔡𝔯10;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯11: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔞𝔡𝔡𝔯11;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯12: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔞𝔡𝔡𝔯12;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯13: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔞𝔡𝔡𝔯13;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯14: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔞𝔡𝔡𝔯14;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯15: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔞𝔡𝔡𝔯15;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯16: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔞𝔡𝔡𝔯16;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯17: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔞𝔡𝔡𝔯17;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯18: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔞𝔡𝔡𝔯18;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯19: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔞𝔡𝔡𝔯19;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯20: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔞𝔡𝔡𝔯20;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯21: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔞𝔡𝔡𝔯21;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯22: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔞𝔡𝔡𝔯22;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯23: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔞𝔡𝔡𝔯23;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯24: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔞𝔡𝔡𝔯24;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯25: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔞𝔡𝔡𝔯25;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯26: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔞𝔡𝔡𝔯26;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯27: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔞𝔡𝔡𝔯27;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯28: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔞𝔡𝔡𝔯28;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯29: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔞𝔡𝔡𝔯29;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯30: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔞𝔡𝔡𝔯30;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯31: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔞𝔡𝔡𝔯31;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯32: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔞𝔡𝔡𝔯32;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯33: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔞𝔡𝔡𝔯33;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯34: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔞𝔡𝔡𝔯34;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯35: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔞𝔡𝔡𝔯35;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯36: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔞𝔡𝔡𝔯36;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯37: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔞𝔡𝔡𝔯37;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯38: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔞𝔡𝔡𝔯38;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯39: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔞𝔡𝔡𝔯39;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯40: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔞𝔡𝔡𝔯40;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯41: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔞𝔡𝔡𝔯41;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯42: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔞𝔡𝔡𝔯42;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯43: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔞𝔡𝔡𝔯43;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯44: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔞𝔡𝔡𝔯44;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯45: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔞𝔡𝔡𝔯45;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯46: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔞𝔡𝔡𝔯46;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯47: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔞𝔡𝔡𝔯47;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯48: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔞𝔡𝔡𝔯48;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯49: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔞𝔡𝔡𝔯49;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯50: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔞𝔡𝔡𝔯50;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯51: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔞𝔡𝔡𝔯51;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯52: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔞𝔡𝔡𝔯52;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯53: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔞𝔡𝔡𝔯53;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯54: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔞𝔡𝔡𝔯54;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯55: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔞𝔡𝔡𝔯55;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯56: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔞𝔡𝔡𝔯56;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯57: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔞𝔡𝔡𝔯57;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯58: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔞𝔡𝔡𝔯58;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯59: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔞𝔡𝔡𝔯59;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯60: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔞𝔡𝔡𝔯60;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯61: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔞𝔡𝔡𝔯61;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯62: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔞𝔡𝔡𝔯62;
                    const 𝔭𝔪𝔭𝔞𝔡𝔡𝔯63: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔭𝔪𝔭𝔞𝔡𝔡𝔯63;
                    const 𝔰𝔠𝔬𝔫𝔱𝔢𝔵𝔱: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔰𝔠𝔬𝔫𝔱𝔢𝔵𝔱;
                    const 𝔥𝔰𝔱𝔞𝔱𝔲𝔰: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔰𝔱𝔞𝔱𝔲𝔰;
                    const 𝔥𝔢𝔡𝔢𝔩𝔢𝔤: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔢𝔡𝔢𝔩𝔢𝔤;
                    const 𝔥𝔦𝔡𝔢𝔩𝔢𝔤: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔦𝔡𝔢𝔩𝔢𝔤;
                    const 𝔥𝔦𝔢: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔦𝔢;
                    const 𝔥𝔱𝔦𝔪𝔢𝔡𝔢𝔩𝔱𝔞: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔱𝔦𝔪𝔢𝔡𝔢𝔩𝔱𝔞;
                    const 𝔥𝔠𝔬𝔲𝔫𝔱𝔢𝔯𝔢𝔫: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔠𝔬𝔲𝔫𝔱𝔢𝔯𝔢𝔫;
                    const 𝔥𝔤𝔢𝔦𝔢: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔤𝔢𝔦𝔢;
                    const 𝔥𝔢𝔫𝔳𝔠𝔣𝔤: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔢𝔫𝔳𝔠𝔣𝔤;
            Ξ𝔯𝔳32[  const 𝔥𝔱𝔦𝔪𝔢𝔡𝔢𝔩𝔱𝔞𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔱𝔦𝔪𝔢𝔡𝔢𝔩𝔱𝔞𝔥;
                    const 𝔥𝔢𝔫𝔳𝔠𝔣𝔤𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔢𝔫𝔳𝔠𝔣𝔤𝔥;]
                    const 𝔥𝔱𝔳𝔞𝔩: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔱𝔳𝔞𝔩;
                    const 𝔥𝔦𝔭: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔦𝔭;
                    const 𝔥𝔳𝔦𝔭: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔳𝔦𝔭;
                    const 𝔥𝔱𝔦𝔫𝔰𝔱: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔱𝔦𝔫𝔰𝔱;
                    const 𝔪𝔰𝔢𝔠𝔠𝔣𝔤: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔰𝔢𝔠𝔠𝔣𝔤;
            Ξ𝔯𝔳32[  const 𝔪𝔰𝔢𝔠𝔠𝔣𝔤𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔰𝔢𝔠𝔠𝔣𝔤𝔥;]
                    const 𝔱𝔰𝔢𝔩𝔢𝔠𝔱: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔱𝔰𝔢𝔩𝔢𝔠𝔱;
                    const 𝔱𝔡𝔞𝔱𝔞1: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔱𝔡𝔞𝔱𝔞1;
                    const 𝔱𝔡𝔞𝔱𝔞2: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔱𝔡𝔞𝔱𝔞2;
                    const 𝔱𝔡𝔞𝔱𝔞3: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔱𝔡𝔞𝔱𝔞3;
                    const 𝔪𝔠𝔬𝔫𝔱𝔢𝔵𝔱: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔠𝔬𝔫𝔱𝔢𝔵𝔱;
                    const 𝔡𝔠𝔰𝔯: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔡𝔠𝔰𝔯;
                    const 𝔡𝔭𝔠: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔡𝔭𝔠;
                    const 𝔡𝔰𝔠𝔯𝔞𝔱𝔠𝔥0: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔡𝔰𝔠𝔯𝔞𝔱𝔠𝔥0;
                    const 𝔡𝔰𝔠𝔯𝔞𝔱𝔠𝔥1: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔡𝔰𝔠𝔯𝔞𝔱𝔠𝔥1;
                    const 𝔪𝔠𝔶𝔠𝔩𝔢: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔠𝔶𝔠𝔩𝔢;
                    const 𝔪𝔦𝔫𝔰𝔱𝔯𝔢𝔱: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔦𝔫𝔰𝔱𝔯𝔢𝔱;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯3: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯3;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯4: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯4;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯5: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯5;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯6: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯6;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯7: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯7;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯8: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯8;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯9: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯9;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯10: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯10;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯11: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯11;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯12: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯12;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯13: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯13;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯14: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯14;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯15: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯15;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯16: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯16;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯17: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯17;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯18: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯18;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯19: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯19;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯20: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯20;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯21: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯21;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯22: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯22;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯23: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯23;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯24: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯24;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯25: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯25;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯26: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯26;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯27: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯27;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯28: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯28;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯29: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯29;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯30: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯30;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯31: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯31;
            Ξ𝔯𝔳32[  const 𝔪𝔠𝔶𝔠𝔩𝔢𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔠𝔶𝔠𝔩𝔢𝔥;
                    const 𝔪𝔦𝔫𝔰𝔱𝔯𝔢𝔱𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔦𝔫𝔰𝔱𝔯𝔢𝔱𝔥;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯3𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯3𝔥;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯4𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯4𝔥;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯5𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯5𝔥;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯6𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯6𝔥;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯7𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯7𝔥;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯8𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯8𝔥;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯9𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯9𝔥;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯10𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯10𝔥;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯11𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯11𝔥;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯12𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯12𝔥;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯13𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯13𝔥;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯14𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯14𝔥;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯15𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯15𝔥;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯16𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯16𝔥;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯17𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯17𝔥;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯18𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯18𝔥;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯19𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯19𝔥;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯20𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯20𝔥;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯21𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯21𝔥;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯22𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯22𝔥;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯23𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯23𝔥;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯24𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯24𝔥;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯25𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯25𝔥;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯26𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯26𝔥;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯27𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯27𝔥;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯28𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯28𝔥;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯29𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯29𝔥;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯30𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯30𝔥;
                    const 𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯31𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯31𝔥;]
                    const 𝔠𝔶𝔠𝔩𝔢: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔠𝔶𝔠𝔩𝔢;
                    const 𝔱𝔦𝔪𝔢: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔱𝔦𝔪𝔢;
                    const 𝔦𝔫𝔰𝔱𝔯𝔢𝔱: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔦𝔫𝔰𝔱𝔯𝔢𝔱;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯3: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯3;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯4: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯4;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯5: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯5;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯6: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯6;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯7: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯7;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯8: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯8;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯9: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯9;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯10: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯10;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯11: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯11;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯12: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯12;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯13: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯13;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯14: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯14;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯15: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯15;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯16: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯16;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯17: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯17;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯18: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯18;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯19: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯19;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯20: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯20;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯21: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯21;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯22: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯22;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯23: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯23;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯24: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯24;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯25: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯25;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯26: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯26;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯27: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯27;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯28: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯28;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯29: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯29;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯30: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯30;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯31: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯31;
            Ξ𝔯𝔳32[  const 𝔠𝔶𝔠𝔩𝔢𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔠𝔶𝔠𝔩𝔢𝔥;
                    const 𝔱𝔦𝔪𝔢𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔱𝔦𝔪𝔢𝔥;
                    const 𝔦𝔫𝔰𝔱𝔯𝔢𝔱𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔦𝔫𝔰𝔱𝔯𝔢𝔱𝔥;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯3𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯3𝔥;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯4𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯4𝔥;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯5𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯5𝔥;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯6𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯6𝔥;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯7𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯7𝔥;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯8𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯8𝔥;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯9𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯9𝔥;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯10𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯10𝔥;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯11𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯11𝔥;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯12𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯12𝔥;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯13𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯13𝔥;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯14𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯14𝔥;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯15𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯15𝔥;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯16𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯16𝔥;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯17𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯17𝔥;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯18𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯18𝔥;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯19𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯19𝔥;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯20𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯20𝔥;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯21𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯21𝔥;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯22𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯22𝔥;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯23𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯23𝔥;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯24𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯24𝔥;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯25𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯25𝔥;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯26𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯26𝔥;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯27𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯27𝔥;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯28𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯28𝔥;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯29𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯29𝔥;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯30𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯30𝔥;
                    const 𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯31𝔥: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔭𝔪𝔠𝔬𝔲𝔫𝔱𝔢𝔯31𝔥;]
                    const 𝔥𝔤𝔢𝔦𝔭: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔥𝔤𝔢𝔦𝔭;
                    const 𝔪𝔳𝔢𝔫𝔡𝔬𝔯𝔦𝔡: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔳𝔢𝔫𝔡𝔬𝔯𝔦𝔡;
                    const 𝔪𝔞𝔯𝔠𝔥𝔦𝔡: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔞𝔯𝔠𝔥𝔦𝔡;
                    const 𝔪𝔦𝔪𝔭𝔦𝔡: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔦𝔪𝔭𝔦𝔡;
                    const 𝔪𝔥𝔞𝔯𝔱𝔦𝔡: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔥𝔞𝔯𝔱𝔦𝔡;
                    const 𝔪𝔠𝔬𝔫𝔣𝔦𝔤𝔭𝔱𝔯: Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 = Self::𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫::𝔪𝔠𝔬𝔫𝔣𝔦𝔤𝔭𝔱𝔯;
                }
            }
        }
        𝖉𝖊𝖋𝖎𝖓𝖊_𝖗𝖎𝖘𝖈𝖛_𝖆𝖘𝖘𝖊𝖒𝖇𝖑𝖊𝖗_𝖘𝖙𝖗𝖚𝖈𝖙! {
            $($𝓸𝓽𝓱𝓮𝓻_𝓽𝓻𝓪𝓲𝓽𝓼)*
        }
    };
    (   $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓻𝓮𝓼𝓽𝓻𝓲𝓬𝓽𝓲𝓸𝓷𝓼:tt
        impl[$($𝓰𝓮𝓷𝓮𝓻𝓲𝓬_𝓻𝓮𝓼𝓽𝓻𝓲𝓬𝓽𝓲𝓸𝓷𝓼:tt)*] $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓽𝓻𝓪𝓲𝓽_𝓷𝓪𝓶𝓮:ident
        for $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓷𝓪𝓶𝓮:ident[$($𝓰𝓮𝓷𝓮𝓻𝓲𝓬_𝓹𝓪𝓻𝓪𝓶𝓼:tt)*]
        {   $($𝓭𝓮𝓯𝓲𝓷𝓮𝓼:tt)*
        }
    ) => {
       #[allow(non_upper_case_globals)]
       impl$($𝓰𝓮𝓷𝓮𝓻𝓲𝓬_𝓻𝓮𝓼𝓽𝓻𝓲𝓬𝓽𝓲𝓸𝓷𝓼)* $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓽𝓻𝓪𝓲𝓽_𝓷𝓪𝓶𝓮
       for $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓷𝓪𝓶𝓮$($𝓰𝓮𝓷𝓮𝓻𝓲𝓬_𝓹𝓪𝓻𝓪𝓶𝓼)*
       {   $($𝓭𝓮𝓯𝓲𝓷𝓮𝓼)*
       }
    };
    () => {}
}

macro_rules! 𝖉𝖊𝖋𝖎𝖓𝖊_𝖗𝖎𝖘𝖈𝖛_𝖆𝖘𝖘𝖊𝖒𝖇𝖑𝖊𝖗_𝖘𝖚𝖕𝖕𝖑𝖊𝖒𝖊𝖓𝖙𝖆𝖗𝖞_𝖙𝖗𝖆𝖎𝖙𝖘 {
    (   $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓻𝓮𝓼𝓽𝓻𝓲𝓬𝓽𝓲𝓸𝓷𝓼:tt
        impl[<𝓮𝓶𝓲𝓽𝓽𝓮𝓻_𝓽𝔂𝓹𝓮: 𝒃𝒚𝒕𝒆_𝒆𝒎𝒊𝒕𝒕𝒆𝒓>]
        for $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓷𝓪𝓶𝓮:ident as $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓽𝓻𝓪𝓲𝓽_𝓷𝓪𝓶𝓮:ident;
    ) => {
        𝖉𝖊𝖋𝖎𝖓𝖊_𝖗𝖎𝖘𝖈𝖛_𝖆𝖘𝖘𝖊𝖒𝖇𝖑𝖊𝖗_𝖘𝖚𝖕𝖕𝖑𝖊𝖒𝖊𝖓𝖙𝖆𝖗𝖞_𝖙𝖗𝖆𝖎𝖙𝖘! {
            $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓻𝓮𝓼𝓽𝓻𝓲𝓬𝓽𝓲𝓸𝓷𝓼
            impl[<𝓮𝓶𝓲𝓽𝓽𝓮𝓻_𝓽𝔂𝓹𝓮: 𝒃𝒚𝒕𝒆_𝒆𝒎𝒊𝒕𝒕𝒆𝒓>] $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓽𝓻𝓪𝓲𝓽_𝓷𝓪𝓶𝓮
            for $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓷𝓪𝓶𝓮[<𝓮𝓶𝓲𝓽𝓽𝓮𝓻_𝓽𝔂𝓹𝓮>];
        }
    };
    ($( $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓻𝓮𝓼𝓽𝓻𝓲𝓬𝓽𝓲𝓸𝓷𝓼:tt
        impl[$($𝓮𝔁𝓽𝓻𝓪_𝓲𝓷𝓯𝓸:tt)*] for $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓷𝓪𝓶𝓮:ident as $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓽𝓻𝓪𝓲𝓽_𝓷𝓪𝓶𝓮:ident;
      )*) => {
        $(
            𝖉𝖊𝖋𝖎𝖓𝖊_𝖗𝖎𝖘𝖈𝖛_𝖆𝖘𝖘𝖊𝖒𝖇𝖑𝖊𝖗_𝖘𝖚𝖕𝖕𝖑𝖊𝖒𝖊𝖓𝖙𝖆𝖗𝖞_𝖙𝖗𝖆𝖎𝖙𝖘! {
                $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓻𝓮𝓼𝓽𝓻𝓲𝓬𝓽𝓲𝓸𝓷𝓼
                impl[$($𝓮𝔁𝓽𝓻𝓪_𝓲𝓷𝓯𝓸)*] for $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓷𝓪𝓶𝓮 as $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓽𝓻𝓪𝓲𝓽_𝓷𝓪𝓶𝓮;
            }
         )*
    };
    (   $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓻𝓮𝓼𝓽𝓻𝓲𝓬𝓽𝓲𝓸𝓷𝓼:tt
        impl$𝓰𝓮𝓷𝓮𝓻𝓲𝓬_𝓻𝓮𝓼𝓽𝓻𝓲𝓬𝓽𝓲𝓸𝓷𝓼:tt $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓽𝓻𝓪𝓲𝓽_𝓷𝓪𝓶𝓮:ident
        for $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓷𝓪𝓶𝓮:ident$𝓰𝓮𝓷𝓮𝓻𝓲𝓬_𝓹𝓪𝓻𝓪𝓶𝓼:tt;
    ) => {
        𝖋𝖎𝖑𝖙𝖊𝖗_𝖗𝖎𝖘𝖈𝖛_𝖒𝖆𝖗𝖐𝖊𝖗𝖘! {
            𝖉𝖊𝖋𝖎𝖓𝖊_𝖗𝖎𝖘𝖈𝖛_𝖆𝖘𝖘𝖊𝖒𝖇𝖑𝖊𝖗_𝖘𝖚𝖕𝖕𝖑𝖊𝖒𝖊𝖓𝖙𝖆𝖗𝖞_𝖙𝖗𝖆𝖎𝖙𝖘! {
                $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓻𝓮𝓼𝓽𝓻𝓲𝓬𝓽𝓲𝓸𝓷𝓼
                impl$𝓰𝓮𝓷𝓮𝓻𝓲𝓬_𝓻𝓮𝓼𝓽𝓻𝓲𝓬𝓽𝓲𝓸𝓷𝓼 $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓽𝓻𝓪𝓲𝓽_𝓷𝓪𝓶𝓮
                for $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓷𝓪𝓶𝓮$𝓰𝓮𝓷𝓮𝓻𝓲𝓬_𝓹𝓪𝓻𝓪𝓶𝓼

                𝖒𝖆𝖗𝖐 𝒔𝒐𝒖𝒓𝒄𝒆_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒐𝒑𝒆𝒓𝒂𝒏𝒅:
        Ξ𝔢𝔞𝔟𝔦[      𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 => 𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜,]
                    𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 => 𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜,
        Ξ𝔢𝔞𝔟𝔦[      𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 => 𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜,]
                    𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 => 𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜
        Ξ𝔢𝔞𝔟𝔦[    , 𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 => 𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜,
                    𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 => 𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜,
                    𝐫𝐨𝐮𝐧𝐝𝐢𝐧𝐠_𝐦𝐨𝐝𝐞 => 𝐫𝐨𝐮𝐧𝐝𝐢𝐧𝐠_𝐦𝐨𝐝𝐞,
                    𝐟𝐞𝐧𝐜𝐞 => 𝐟𝐞𝐧𝐜𝐞,
                    𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 => 𝐜𝐬𝐫_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫];

                𝖒𝖆𝖗𝖐 𝒔𝒐𝒖𝒓𝒄𝒆_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒃𝒂𝒔𝒆:
        Ξ𝔢𝔞𝔟𝔦[      𝐮𝐧𝐟𝐢𝐥𝐥𝐞𝐝_𝐟𝐥𝐮𝐞𝐧𝐭_𝐯𝐚𝐥𝐮𝐞 => 𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜,
                    𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 => 𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜,]
                    𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 => 𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜,
        Ξ𝔢𝔞𝔟𝔦[      𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 => 𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜,]
                    𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 => 𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;

        Ξ𝔢𝔞𝔟𝔦[  𝖒𝖆𝖗𝖐 𝒔𝒐𝒖𝒓𝒄𝒆_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒅𝒊𝒔𝒑:
                    𝐮𝐧𝐟𝐢𝐥𝐥𝐞𝐝_𝐟𝐥𝐮𝐞𝐧𝐭_𝐯𝐚𝐥𝐮𝐞 => 𝐢𝐦𝐦𝐞𝐝𝐢𝐚𝐭𝐞;]

                𝖒𝖆𝖗𝖐 𝒅𝒆𝒔𝒕𝒊𝒏𝒂𝒕𝒊𝒐𝒏_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒐𝒑𝒆𝒓𝒂𝒏𝒅:
        Ξ𝔢𝔞𝔟𝔦[      𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 => 𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜,]
                    𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 => 𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜,
        Ξ𝔢𝔞𝔟𝔦[      𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 => 𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜,]
                    𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 => 𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜
        Ξ𝔢𝔞𝔟𝔦[    , 𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 => 𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜,
                    𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 => 𝐟𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜];

                𝖒𝖆𝖗𝖐 𝒅𝒆𝒔𝒕𝒊𝒏𝒂𝒕𝒊𝒐𝒏_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒃𝒂𝒔𝒆:
        Ξ𝔢𝔞𝔟𝔦[      𝐮𝐧𝐟𝐢𝐥𝐥𝐞𝐝_𝐟𝐥𝐮𝐞𝐧𝐭_𝐯𝐚𝐥𝐮𝐞 => 𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜,
                    𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 => 𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜,]
                    𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 => 𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜,
        Ξ𝔢𝔞𝔟𝔦[      𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 => 𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜,]
                    𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 => 𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;

        Ξ𝔢𝔞𝔟𝔦[  𝖒𝖆𝖗𝖐 𝒅𝒆𝒔𝒕𝒊𝒏𝒂𝒕𝒊𝒐𝒏_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒅𝒊𝒔𝒑:
                    𝐮𝐧𝐟𝐢𝐥𝐥𝐞𝐝_𝐟𝐥𝐮𝐞𝐧𝐭_𝐯𝐚𝐥𝐮𝐞 => 𝐝𝐞𝐬𝐭𝐢𝐧𝐚𝐭𝐢𝐨𝐧_𝐢𝐦𝐦𝐞𝐝𝐢𝐚𝐭𝐞;]

                𝖒𝖆𝖗𝖐 𝒄𝒔𝒓_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒐𝒑𝒆𝒓𝒂𝒏𝒅:
        Ξ𝔢𝔞𝔟𝔦[      𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 => 𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜,]
                    𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 => 𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜,
        Ξ𝔢𝔞𝔟𝔦[      𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 => 𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜,]
                    𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 => 𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;

                𝖒𝖆𝖗𝖐 𝒑𝒓𝒆𝒇𝒆𝒕𝒄𝒉_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒃𝒂𝒔𝒆:
        Ξ𝔢𝔞𝔟𝔦[      𝐮𝐧𝐟𝐢𝐥𝐥𝐞𝐝_𝐟𝐥𝐮𝐞𝐧𝐭_𝐯𝐚𝐥𝐮𝐞 => 𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜,
                    𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 => 𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜,]
                    𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 => 𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜,
        Ξ𝔢𝔞𝔟𝔦[      𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 => 𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜,]
                    𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 => 𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;

        Ξ𝔢𝔞𝔟𝔦[  𝖒𝖆𝖗𝖐 𝒑𝒓𝒆𝒇𝒆𝒕𝒄𝒉_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒅𝒊𝒔𝒑:
                    𝐮𝐧𝐟𝐢𝐥𝐥𝐞𝐝_𝐟𝐥𝐮𝐞𝐧𝐭_𝐯𝐚𝐥𝐮𝐞 => 𝐩𝐫𝐞𝐟𝐞𝐭𝐜𝐡_𝐢𝐦𝐦𝐞𝐝𝐢𝐚𝐭𝐞;]

                𝖒𝖆𝖗𝖐 𝒔𝒉𝒊𝒇𝒕_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒐𝒑𝒆𝒓𝒂𝒏𝒅:
        Ξ𝔢𝔞𝔟𝔦[      𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 => 𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜,]
                    𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 => 𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜,
        Ξ𝔢𝔞𝔟𝔦[      𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 => 𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜,]
                    𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 => 𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;

                𝖒𝖆𝖗𝖐 𝒛𝒆𝒓𝒐_𝒐𝒇𝒇𝒔𝒆𝒕_𝒂𝒅𝒅𝒓𝒆𝒔𝒔_𝒂𝒔𝒔𝒆𝒎𝒃𝒍𝒆𝒓_𝒃𝒂𝒔𝒆:
        Ξ𝔢𝔞𝔟𝔦[      𝐮𝐧𝐟𝐢𝐥𝐥𝐞𝐝_𝐟𝐥𝐮𝐞𝐧𝐭_𝐯𝐚𝐥𝐮𝐞 => 𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜,
                    𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 => 𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜,]
                    𝐧𝐨𝐳𝐞𝐫𝐨_𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 => 𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜,
        Ξ𝔢𝔞𝔟𝔦[      𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜 => 𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜,]
                    𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐚𝐛𝐢 => 𝐠𝐩_𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫_𝐧𝐮𝐦𝐞𝐫𝐢𝐜;

                𝔽𝕠𝕣𝕨𝕒𝕣𝕕𝕀𝕞𝕡𝕝𝕖𝕞𝕖𝕟𝕥𝕋𝕣𝕒𝕚𝕥𝕤
            }
        }
    };
    (   $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓻𝓮𝓼𝓽𝓻𝓲𝓬𝓽𝓲𝓸𝓷𝓼:tt
        impl[$($𝓰𝓮𝓷𝓮𝓻𝓲𝓬_𝓻𝓮𝓼𝓽𝓻𝓲𝓬𝓽𝓲𝓸𝓷𝓼:tt)*] $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓽𝓻𝓪𝓲𝓽_𝓷𝓪𝓶𝓮:ident
        for $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓷𝓪𝓶𝓮:ident[$($𝓰𝓮𝓷𝓮𝓻𝓲𝓬_𝓹𝓪𝓻𝓪𝓶𝓼:tt)*]
        𝖒𝖆𝖗𝖐 $𝓬𝓸𝓷𝓿𝓮𝓻𝓼𝓲𝓸𝓷_𝓷𝓪𝓶𝓮:ident: 𝐮𝐧𝐟𝐢𝐥𝐥𝐞𝐝_𝐟𝐥𝐮𝐞𝐧𝐭_𝐯𝐚𝐥𝐮𝐞 => $𝓽𝓪𝓻𝓰𝓮𝓽_𝓷𝓪𝓶𝓮:ident;
    ) => {
        #[doc(hidden)]
        impl$($𝓰𝓮𝓷𝓮𝓻𝓲𝓬_𝓻𝓮𝓼𝓽𝓻𝓲𝓬𝓽𝓲𝓸𝓷𝓼)* $𝓬𝓸𝓷𝓿𝓮𝓻𝓼𝓲𝓸𝓷_𝓷𝓪𝓶𝓮<$𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓷𝓪𝓶𝓮$($𝓰𝓮𝓷𝓮𝓻𝓲𝓬_𝓹𝓪𝓻𝓪𝓶𝓼)*>
        for 𝐮𝐧𝐟𝐢𝐥𝐥𝐞𝐝_𝐟𝐥𝐮𝐞𝐧𝐭_𝐯𝐚𝐥𝐮𝐞 {
            type 𝐭𝐚𝐫𝐠𝐞𝐭 = <$𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓷𝓪𝓶𝓮$($𝓰𝓮𝓷𝓮𝓻𝓲𝓬_𝓹𝓪𝓻𝓪𝓶𝓼)* as $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓽𝓻𝓪𝓲𝓽_𝓷𝓪𝓶𝓮>::$𝓽𝓪𝓻𝓰𝓮𝓽_𝓷𝓪𝓶𝓮;
        }
    };
    (   $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓻𝓮𝓼𝓽𝓻𝓲𝓬𝓽𝓲𝓸𝓷𝓼:tt
        impl[$($𝓰𝓮𝓷𝓮𝓻𝓲𝓬_𝓻𝓮𝓼𝓽𝓻𝓲𝓬𝓽𝓲𝓸𝓷𝓼:tt)*] $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓽𝓻𝓪𝓲𝓽_𝓷𝓪𝓶𝓮:ident
        for $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓷𝓪𝓶𝓮:ident[$($𝓰𝓮𝓷𝓮𝓻𝓲𝓬_𝓹𝓪𝓻𝓪𝓶𝓼:tt)*]
        𝖒𝖆𝖗𝖐 $𝓬𝓸𝓷𝓿𝓮𝓻𝓼𝓲𝓸𝓷_𝓷𝓪𝓶𝓮:ident: $𝓼𝓸𝓾𝓻𝓬𝓮_𝓷𝓪𝓶𝓮:ident => $𝓽𝓪𝓻𝓰𝓮𝓽_𝓷𝓪𝓶𝓮:ident;
    ) => {
        #[doc(hidden)]
        impl$($𝓰𝓮𝓷𝓮𝓻𝓲𝓬_𝓻𝓮𝓼𝓽𝓻𝓲𝓬𝓽𝓲𝓸𝓷𝓼)* $𝓬𝓸𝓷𝓿𝓮𝓻𝓼𝓲𝓸𝓷_𝓷𝓪𝓶𝓮<$𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓷𝓪𝓶𝓮$($𝓰𝓮𝓷𝓮𝓻𝓲𝓬_𝓹𝓪𝓻𝓪𝓶𝓼)*>
        for <$𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓷𝓪𝓶𝓮$($𝓰𝓮𝓷𝓮𝓻𝓲𝓬_𝓹𝓪𝓻𝓪𝓶𝓼)* as $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓽𝓻𝓪𝓲𝓽_𝓷𝓪𝓶𝓮>::$𝓼𝓸𝓾𝓻𝓬𝓮_𝓷𝓪𝓶𝓮 {
            type 𝐭𝐚𝐫𝐠𝐞𝐭 = <$𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓷𝓪𝓶𝓮$($𝓰𝓮𝓷𝓮𝓻𝓲𝓬_𝓹𝓪𝓻𝓪𝓶𝓼)* as $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓽𝓻𝓪𝓲𝓽_𝓷𝓪𝓶𝓮>::$𝓽𝓪𝓻𝓰𝓮𝓽_𝓷𝓪𝓶𝓮;
        }
    };
    (   $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓻𝓮𝓼𝓽𝓻𝓲𝓬𝓽𝓲𝓸𝓷𝓼:tt
        impl$𝓰𝓮𝓷𝓮𝓻𝓲𝓬_𝓻𝓮𝓼𝓽𝓻𝓲𝓬𝓽𝓲𝓸𝓷𝓼:tt $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓽𝓻𝓪𝓲𝓽_𝓷𝓪𝓶𝓮:ident
        for $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓷𝓪𝓶𝓮:ident$𝓰𝓮𝓷𝓮𝓻𝓲𝓬_𝓹𝓪𝓻𝓪𝓶𝓼:tt
        𝖒𝖆𝖗𝖐 $𝓬𝓸𝓷𝓿𝓮𝓻𝓼𝓲𝓸𝓷_𝓷𝓪𝓶𝓮:ident:
            $($𝓼𝓸𝓾𝓻𝓬𝓮_𝓷𝓪𝓶𝓮:ident<$𝓮𝔁𝓽𝓻𝓪_𝓷𝓪𝓶𝓮:ident> => $𝓽𝓪𝓻𝓰𝓮𝓽_𝓷𝓪𝓶𝓮:ident),*;
        $($𝓸𝓽𝓱𝓮𝓻_𝓽𝓻𝓪𝓲𝓽𝓼:tt)*
    ) => {
        $(  𝖉𝖊𝖋𝖎𝖓𝖊_𝖗𝖎𝖘𝖈𝖛_𝖆𝖘𝖘𝖊𝖒𝖇𝖑𝖊𝖗_𝖘𝖚𝖕𝖕𝖑𝖊𝖒𝖊𝖓𝖙𝖆𝖗𝖞_𝖙𝖗𝖆𝖎𝖙𝖘! {
                $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓻𝓮𝓼𝓽𝓻𝓲𝓬𝓽𝓲𝓸𝓷𝓼
                impl$𝓰𝓮𝓷𝓮𝓻𝓲𝓬_𝓻𝓮𝓼𝓽𝓻𝓲𝓬𝓽𝓲𝓸𝓷𝓼 $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓽𝓻𝓪𝓲𝓽_𝓷𝓪𝓶𝓮
                for $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓷𝓪𝓶𝓮$𝓰𝓮𝓷𝓮𝓻𝓲𝓬_𝓹𝓪𝓻𝓪𝓶𝓼
                𝖒𝖆𝖗𝖐 $𝓬𝓸𝓷𝓿𝓮𝓻𝓼𝓲𝓸𝓷_𝓷𝓪𝓶𝓮: $𝓼𝓸𝓾𝓻𝓬𝓮_𝓷𝓪𝓶𝓮<$𝓮𝔁𝓽𝓻𝓪_𝓷𝓪𝓶𝓮> => $𝓽𝓪𝓻𝓰𝓮𝓽_𝓷𝓪𝓶𝓮;
            }
        )*
        𝖉𝖊𝖋𝖎𝖓𝖊_𝖗𝖎𝖘𝖈𝖛_𝖆𝖘𝖘𝖊𝖒𝖇𝖑𝖊𝖗_𝖘𝖚𝖕𝖕𝖑𝖊𝖒𝖊𝖓𝖙𝖆𝖗𝖞_𝖙𝖗𝖆𝖎𝖙𝖘! {
            $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓻𝓮𝓼𝓽𝓻𝓲𝓬𝓽𝓲𝓸𝓷𝓼
            impl$𝓰𝓮𝓷𝓮𝓻𝓲𝓬_𝓻𝓮𝓼𝓽𝓻𝓲𝓬𝓽𝓲𝓸𝓷𝓼 $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓽𝓻𝓪𝓲𝓽_𝓷𝓪𝓶𝓮
            for $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓷𝓪𝓶𝓮$𝓰𝓮𝓷𝓮𝓻𝓲𝓬_𝓹𝓪𝓻𝓪𝓶𝓼
            $($𝓸𝓽𝓱𝓮𝓻_𝓽𝓻𝓪𝓲𝓽𝓼)*
        }
    };
    (   $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓻𝓮𝓼𝓽𝓻𝓲𝓬𝓽𝓲𝓸𝓷𝓼:tt
        impl$𝓰𝓮𝓷𝓮𝓻𝓲𝓬_𝓻𝓮𝓼𝓽𝓻𝓲𝓬𝓽𝓲𝓸𝓷𝓼:tt $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓽𝓻𝓪𝓲𝓽_𝓷𝓪𝓶𝓮:ident
        for $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓷𝓪𝓶𝓮:ident$𝓰𝓮𝓷𝓮𝓻𝓲𝓬_𝓹𝓪𝓻𝓪𝓶𝓼:tt
        𝖒𝖆𝖗𝖐 $𝓬𝓸𝓷𝓿𝓮𝓻𝓼𝓲𝓸𝓷_𝓷𝓪𝓶𝓮:ident:
           $($𝓼𝓸𝓾𝓻𝓬𝓮_𝓷𝓪𝓶𝓮:ident => $𝓽𝓪𝓻𝓰𝓮𝓽_𝓷𝓪𝓶𝓮:ident),*;
        $($𝓸𝓽𝓱𝓮𝓻_𝓽𝓻𝓪𝓲𝓽𝓼:tt)*
    ) => {
        $(  𝖉𝖊𝖋𝖎𝖓𝖊_𝖗𝖎𝖘𝖈𝖛_𝖆𝖘𝖘𝖊𝖒𝖇𝖑𝖊𝖗_𝖘𝖚𝖕𝖕𝖑𝖊𝖒𝖊𝖓𝖙𝖆𝖗𝖞_𝖙𝖗𝖆𝖎𝖙𝖘! {
                $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓻𝓮𝓼𝓽𝓻𝓲𝓬𝓽𝓲𝓸𝓷𝓼
                impl$𝓰𝓮𝓷𝓮𝓻𝓲𝓬_𝓻𝓮𝓼𝓽𝓻𝓲𝓬𝓽𝓲𝓸𝓷𝓼 $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓽𝓻𝓪𝓲𝓽_𝓷𝓪𝓶𝓮
                for $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓷𝓪𝓶𝓮$𝓰𝓮𝓷𝓮𝓻𝓲𝓬_𝓹𝓪𝓻𝓪𝓶𝓼
                𝖒𝖆𝖗𝖐 $𝓬𝓸𝓷𝓿𝓮𝓻𝓼𝓲𝓸𝓷_𝓷𝓪𝓶𝓮: $𝓼𝓸𝓾𝓻𝓬𝓮_𝓷𝓪𝓶𝓮 => $𝓽𝓪𝓻𝓰𝓮𝓽_𝓷𝓪𝓶𝓮;
            }
        )*
        𝖉𝖊𝖋𝖎𝖓𝖊_𝖗𝖎𝖘𝖈𝖛_𝖆𝖘𝖘𝖊𝖒𝖇𝖑𝖊𝖗_𝖘𝖚𝖕𝖕𝖑𝖊𝖒𝖊𝖓𝖙𝖆𝖗𝖞_𝖙𝖗𝖆𝖎𝖙𝖘! {
            $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓻𝓮𝓼𝓽𝓻𝓲𝓬𝓽𝓲𝓸𝓷𝓼
            impl$𝓰𝓮𝓷𝓮𝓻𝓲𝓬_𝓻𝓮𝓼𝓽𝓻𝓲𝓬𝓽𝓲𝓸𝓷𝓼 $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓽𝓻𝓪𝓲𝓽_𝓷𝓪𝓶𝓮
            for $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓷𝓪𝓶𝓮$𝓰𝓮𝓷𝓮𝓻𝓲𝓬_𝓹𝓪𝓻𝓪𝓶𝓼
            $($𝓸𝓽𝓱𝓮𝓻_𝓽𝓻𝓪𝓲𝓽𝓼)*
        }
    };
    (   $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓻𝓮𝓼𝓽𝓻𝓲𝓬𝓽𝓲𝓸𝓷𝓼:tt
        impl$𝓰𝓮𝓷𝓮𝓻𝓲𝓬_𝓻𝓮𝓼𝓽𝓻𝓲𝓬𝓽𝓲𝓸𝓷𝓼:tt $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓽𝓻𝓪𝓲𝓽_𝓷𝓪𝓶𝓮:ident
        for $𝓪𝓼𝓼𝓮𝓶𝓫𝓵𝓮𝓻_𝓷𝓪𝓶𝓮:ident$𝓰𝓮𝓷𝓮𝓻𝓲𝓬_𝓹𝓪𝓻𝓪𝓶𝓼:tt
        $($𝓸𝓽𝓱𝓮𝓻_𝓽𝓻𝓪𝓲𝓽𝓼:tt)*
    ) => {
        $($𝓸𝓽𝓱𝓮𝓻_𝓽𝓻𝓪𝓲𝓽𝓼)*
    }
}
