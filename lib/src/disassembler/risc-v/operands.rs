/*
 * Permission is hereby granted, free of charge, to any human obtaining a copy of this software and associated documentation files
 * (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify,
 * merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit humans to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

#[derive(Clone, Debug, Eq, Ord, PartialEq, PartialOrd)]
#[non_exhaustive]
#[repr(i8)]
pub enum 𝐨𝐩𝐞𝐫𝐚𝐧𝐝_𝐫𝐯𝟑𝟐<
    𝓰𝓮𝓷𝓮𝓻𝓪𝓵_𝓹𝓾𝓻𝓹𝓸𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻_𝓽𝔂𝓹𝓮,
    𝓯𝓵𝓸𝓪𝓽𝓲𝓷𝓰_𝓹𝓸𝓲𝓷𝓽_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻_𝓽𝔂𝓹𝓮,
    𝓬𝓸𝓷𝓽𝓻𝓸𝓵_𝓼𝓽𝓪𝓽𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻_𝓽𝔂𝓹𝓮,
    𝓻𝓸𝓾𝓷𝓭𝓲𝓷𝓰_𝓶𝓸𝓭𝓮_𝓽𝔂𝓹𝓮,
    𝓯𝓮𝓷𝓬𝓮_𝓸𝓹𝓮𝓻𝓪𝓷𝓭_𝓽𝔂𝓹𝓮,
    𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮,
    𝓾𝓹𝓹𝓮𝓻_𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮,
    𝓭𝓮𝓼𝓽𝓲𝓷𝓪𝓽𝓲𝓸𝓷_𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮,
    𝓫𝓻𝓪𝓷𝓬𝓱_𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮,
    𝓳𝓾𝓶𝓹_𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮,
    𝓬𝓼𝓻_𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮,
    𝓹𝓻𝓮𝓯𝓮𝓽𝓬𝓱_𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮,
    𝓼𝓱𝓲𝓯𝓽_𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮,
> {
    𝔤𝔭_𝔯𝔢𝔤𝔦𝔰𝔱𝔢𝔯_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(𝓰𝓮𝓷𝓮𝓻𝓪𝓵_𝓹𝓾𝓻𝓹𝓸𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻_𝓽𝔂𝓹𝓮),
    𝔣𝔭_𝔯𝔢𝔤𝔦𝔰𝔱𝔢𝔯_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(𝓯𝓵𝓸𝓪𝓽𝓲𝓷𝓰_𝓹𝓸𝓲𝓷𝓽_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻_𝓽𝔂𝓹𝓮),
    𝔠𝔰𝔯_𝔯𝔢𝔤𝔦𝔰𝔱𝔢𝔯_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(𝓬𝓸𝓷𝓽𝓻𝓸𝓵_𝓼𝓽𝓪𝓽𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻_𝓽𝔂𝓹𝓮),
    𝔯𝔬𝔲𝔫𝔡𝔦𝔫𝔤_𝔪𝔬𝔡𝔢_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(𝓻𝓸𝓾𝓷𝓭𝓲𝓷𝓰_𝓶𝓸𝓭𝓮_𝓽𝔂𝓹𝓮),
    𝔣𝔢𝔫𝔠𝔢_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(𝓯𝓮𝓷𝓬𝓮_𝓸𝓹𝓮𝓻𝓪𝓷𝓭_𝓽𝔂𝓹𝓮),
    𝔦𝔪𝔪𝔢𝔡𝔦𝔞𝔱𝔢_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮),
    𝔲𝔭𝔭𝔢𝔯_𝔦𝔪𝔪𝔢𝔡𝔦𝔞𝔱𝔢_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(𝓾𝓹𝓹𝓮𝓻_𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮),
    𝔡𝔢𝔰𝔱𝔦𝔫𝔞𝔱𝔦𝔬𝔫_𝔦𝔪𝔪𝔢𝔡𝔦𝔞𝔱𝔢_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(𝓭𝓮𝓼𝓽𝓲𝓷𝓪𝓽𝓲𝓸𝓷_𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮),
    𝔟𝔯𝔞𝔫𝔠𝔥_𝔦𝔪𝔪𝔢𝔡𝔦𝔞𝔱𝔢_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(𝓫𝓻𝓪𝓷𝓬𝓱_𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮),
    𝔧𝔲𝔪𝔭_𝔦𝔪𝔪𝔢𝔡𝔦𝔞𝔱𝔢_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(𝓳𝓾𝓶𝓹_𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮),
    𝔠𝔰𝔯_𝔦𝔪𝔪𝔢𝔡𝔦𝔞𝔱𝔢_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(𝓬𝓼𝓻_𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮),
    𝔰𝔥𝔦𝔣𝔱_𝔦𝔪𝔪𝔢𝔡𝔦𝔞𝔱𝔢_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(𝓼𝓱𝓲𝓯𝓽_𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮),
    𝔞𝔱𝔬𝔪𝔦𝔠_𝔞𝔡𝔡𝔯𝔢𝔰𝔰_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(𝒂𝒅𝒅𝒓𝒆𝒔𝒔<𝓰𝓮𝓷𝓮𝓻𝓪𝓵_𝓹𝓾𝓻𝓹𝓸𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻_𝓽𝔂𝓹𝓮, 𝐮𝐧𝐟𝐢𝐥𝐥𝐞𝐝_𝐟𝐥𝐮𝐞𝐧𝐭_𝐯𝐚𝐥𝐮𝐞>),
    𝔰𝔬𝔲𝔯𝔠𝔢_𝔞𝔡𝔡𝔯𝔢𝔰𝔰_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(𝒂𝒅𝒅𝒓𝒆𝒔𝒔<𝓰𝓮𝓷𝓮𝓻𝓪𝓵_𝓹𝓾𝓻𝓹𝓸𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻_𝓽𝔂𝓹𝓮, 𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮>),
    𝔡𝔢𝔰𝔱𝔦𝔫𝔞𝔱𝔦𝔬𝔫_𝔞𝔡𝔡𝔯𝔢𝔰𝔰_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(𝒂𝒅𝒅𝒓𝒆𝒔𝒔<𝓰𝓮𝓷𝓮𝓻𝓪𝓵_𝓹𝓾𝓻𝓹𝓸𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻_𝓽𝔂𝓹𝓮, 𝓭𝓮𝓼𝓽𝓲𝓷𝓪𝓽𝓲𝓸𝓷_𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮>),
    𝔭𝔯𝔢𝔣𝔢𝔱𝔠𝔥_𝔞𝔡𝔡𝔯𝔢𝔰𝔰_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(𝒂𝒅𝒅𝒓𝒆𝒔𝒔<𝓰𝓮𝓷𝓮𝓻𝓪𝓵_𝓹𝓾𝓻𝓹𝓸𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻_𝓽𝔂𝓹𝓮, 𝓹𝓻𝓮𝓯𝓮𝓽𝓬𝓱_𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮>),
}

#[cfg(feature = "std")]
impl<𝓰𝓮𝓷𝓮𝓻𝓪𝓵_𝓹𝓾𝓻𝓹𝓸𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻_𝓽𝔂𝓹𝓮: std::fmt::Display,
     𝓯𝓵𝓸𝓪𝓽𝓲𝓷𝓰_𝓹𝓸𝓲𝓷𝓽_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻_𝓽𝔂𝓹𝓮: std::fmt::Display,
     𝓬𝓸𝓷𝓽𝓻𝓸𝓵_𝓼𝓽𝓪𝓽𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻_𝓽𝔂𝓹𝓮: std::fmt::Display,
     𝓻𝓸𝓾𝓷𝓭𝓲𝓷𝓰_𝓶𝓸𝓭𝓮_𝓽𝔂𝓹𝓮: std::fmt::Display,
     𝓯𝓮𝓷𝓬𝓮_𝓸𝓹𝓮𝓻𝓪𝓷𝓭_𝓽𝔂𝓹𝓮: std::fmt::Display,
     𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮: std::fmt::Display,
     𝓾𝓹𝓹𝓮𝓻_𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮: std::fmt::Display,
     𝓭𝓮𝓼𝓽𝓲𝓷𝓪𝓽𝓲𝓸𝓷_𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮: std::fmt::Display,
     𝓫𝓻𝓪𝓷𝓬𝓱_𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮: std::fmt::Display,
     𝓳𝓾𝓶𝓹_𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮: std::fmt::Display,
     𝓬𝓼𝓻_𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮: std::fmt::Display,
     𝓹𝓻𝓮𝓯𝓮𝓽𝓬𝓱_𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮: std::fmt::Display,
     𝓼𝓱𝓲𝓯𝓽_𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮: std::fmt::Display,
> std::fmt::Display for 𝐨𝐩𝐞𝐫𝐚𝐧𝐝_𝐫𝐯𝟑𝟐<
    𝓰𝓮𝓷𝓮𝓻𝓪𝓵_𝓹𝓾𝓻𝓹𝓸𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻_𝓽𝔂𝓹𝓮,
    𝓯𝓵𝓸𝓪𝓽𝓲𝓷𝓰_𝓹𝓸𝓲𝓷𝓽_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻_𝓽𝔂𝓹𝓮,
    𝓬𝓸𝓷𝓽𝓻𝓸𝓵_𝓼𝓽𝓪𝓽𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻_𝓽𝔂𝓹𝓮,
    𝓻𝓸𝓾𝓷𝓭𝓲𝓷𝓰_𝓶𝓸𝓭𝓮_𝓽𝔂𝓹𝓮,
    𝓯𝓮𝓷𝓬𝓮_𝓸𝓹𝓮𝓻𝓪𝓷𝓭_𝓽𝔂𝓹𝓮,
    𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮,
    𝓾𝓹𝓹𝓮𝓻_𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮,
    𝓭𝓮𝓼𝓽𝓲𝓷𝓪𝓽𝓲𝓸𝓷_𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮,
    𝓫𝓻𝓪𝓷𝓬𝓱_𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮,
    𝓳𝓾𝓶𝓹_𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮,
    𝓬𝓼𝓻_𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮,
    𝓹𝓻𝓮𝓯𝓮𝓽𝓬𝓱_𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮,
    𝓼𝓱𝓲𝓯𝓽_𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮,
> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            𝐨𝐩𝐞𝐫𝐚𝐧𝐝_𝐫𝐯𝟑𝟐::𝔤𝔭_𝔯𝔢𝔤𝔦𝔰𝔱𝔢𝔯_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(operand) => operand.fmt(f),
            𝐨𝐩𝐞𝐫𝐚𝐧𝐝_𝐫𝐯𝟑𝟐::𝔣𝔭_𝔯𝔢𝔤𝔦𝔰𝔱𝔢𝔯_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(operand) => operand.fmt(f),
            𝐨𝐩𝐞𝐫𝐚𝐧𝐝_𝐫𝐯𝟑𝟐::𝔠𝔰𝔯_𝔯𝔢𝔤𝔦𝔰𝔱𝔢𝔯_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(operand) => operand.fmt(f),
            𝐨𝐩𝐞𝐫𝐚𝐧𝐝_𝐫𝐯𝟑𝟐::𝔯𝔬𝔲𝔫𝔡𝔦𝔫𝔤_𝔪𝔬𝔡𝔢_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(operand) => operand.fmt(f),
            𝐨𝐩𝐞𝐫𝐚𝐧𝐝_𝐫𝐯𝟑𝟐::𝔣𝔢𝔫𝔠𝔢_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(operand) => operand.fmt(f),
            𝐨𝐩𝐞𝐫𝐚𝐧𝐝_𝐫𝐯𝟑𝟐::𝔦𝔪𝔪𝔢𝔡𝔦𝔞𝔱𝔢_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(operand) => operand.fmt(f),
            𝐨𝐩𝐞𝐫𝐚𝐧𝐝_𝐫𝐯𝟑𝟐::𝔲𝔭𝔭𝔢𝔯_𝔦𝔪𝔪𝔢𝔡𝔦𝔞𝔱𝔢_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(operand) => operand.fmt(f),
            𝐨𝐩𝐞𝐫𝐚𝐧𝐝_𝐫𝐯𝟑𝟐::𝔡𝔢𝔰𝔱𝔦𝔫𝔞𝔱𝔦𝔬𝔫_𝔦𝔪𝔪𝔢𝔡𝔦𝔞𝔱𝔢_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(operand) => operand.fmt(f),
            𝐨𝐩𝐞𝐫𝐚𝐧𝐝_𝐫𝐯𝟑𝟐::𝔟𝔯𝔞𝔫𝔠𝔥_𝔦𝔪𝔪𝔢𝔡𝔦𝔞𝔱𝔢_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(operand) => operand.fmt(f),
            𝐨𝐩𝐞𝐫𝐚𝐧𝐝_𝐫𝐯𝟑𝟐::𝔧𝔲𝔪𝔭_𝔦𝔪𝔪𝔢𝔡𝔦𝔞𝔱𝔢_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(operand) => operand.fmt(f),
            𝐨𝐩𝐞𝐫𝐚𝐧𝐝_𝐫𝐯𝟑𝟐::𝔠𝔰𝔯_𝔦𝔪𝔪𝔢𝔡𝔦𝔞𝔱𝔢_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(operand) => operand.fmt(f),
            𝐨𝐩𝐞𝐫𝐚𝐧𝐝_𝐫𝐯𝟑𝟐::𝔰𝔥𝔦𝔣𝔱_𝔦𝔪𝔪𝔢𝔡𝔦𝔞𝔱𝔢_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(operand) => operand.fmt(f),
            𝐨𝐩𝐞𝐫𝐚𝐧𝐝_𝐫𝐯𝟑𝟐::𝔞𝔱𝔬𝔪𝔦𝔠_𝔞𝔡𝔡𝔯𝔢𝔰𝔰_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(operand) => operand.fmt(f),
            𝐨𝐩𝐞𝐫𝐚𝐧𝐝_𝐫𝐯𝟑𝟐::𝔰𝔬𝔲𝔯𝔠𝔢_𝔞𝔡𝔡𝔯𝔢𝔰𝔰_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(operand) => operand.fmt(f),
            𝐨𝐩𝐞𝐫𝐚𝐧𝐝_𝐫𝐯𝟑𝟐::𝔡𝔢𝔰𝔱𝔦𝔫𝔞𝔱𝔦𝔬𝔫_𝔞𝔡𝔡𝔯𝔢𝔰𝔰_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(operand) => operand.fmt(f),
            𝐨𝐩𝐞𝐫𝐚𝐧𝐝_𝐫𝐯𝟑𝟐::𝔭𝔯𝔢𝔣𝔢𝔱𝔠𝔥_𝔞𝔡𝔡𝔯𝔢𝔰𝔰_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(operand) => operand.fmt(f),
        }
    }
}

#[derive(Clone, Debug, Eq, Ord, PartialEq, PartialOrd)]
#[non_exhaustive]
#[repr(i8)]
pub enum 𝐨𝐩𝐞𝐫𝐚𝐧𝐝_𝐫𝐯𝟔𝟒<
    𝓰𝓮𝓷𝓮𝓻𝓪𝓵_𝓹𝓾𝓻𝓹𝓸𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻_𝓽𝔂𝓹𝓮,
    𝓯𝓵𝓸𝓪𝓽𝓲𝓷𝓰_𝓹𝓸𝓲𝓷𝓽_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻_𝓽𝔂𝓹𝓮,
    𝓬𝓸𝓷𝓽𝓻𝓸𝓵_𝓼𝓽𝓪𝓽𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻_𝓽𝔂𝓹𝓮,
    𝓻𝓸𝓾𝓷𝓭𝓲𝓷𝓰_𝓶𝓸𝓭𝓮_𝓽𝔂𝓹𝓮,
    𝓯𝓮𝓷𝓬𝓮_𝓸𝓹𝓮𝓻𝓪𝓷𝓭_𝓽𝔂𝓹𝓮,
    𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮,
    𝓾𝓹𝓹𝓮𝓻_𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮,
    𝓭𝓮𝓼𝓽𝓲𝓷𝓪𝓽𝓲𝓸𝓷_𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮,
    𝓫𝓻𝓪𝓷𝓬𝓱_𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮,
    𝓳𝓾𝓶𝓹_𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮,
    𝓬𝓼𝓻_𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮,
    𝓹𝓻𝓮𝓯𝓮𝓽𝓬𝓱_𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮,
    𝓼𝓱𝓲𝓯𝓽_𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮,
    𝔀𝓸𝓻𝓭_𝓼𝓱𝓲𝓯𝓽_𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮,
> {
    𝔤𝔭_𝔯𝔢𝔤𝔦𝔰𝔱𝔢𝔯_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(𝓰𝓮𝓷𝓮𝓻𝓪𝓵_𝓹𝓾𝓻𝓹𝓸𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻_𝓽𝔂𝓹𝓮),
    𝔣𝔭_𝔯𝔢𝔤𝔦𝔰𝔱𝔢𝔯_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(𝓯𝓵𝓸𝓪𝓽𝓲𝓷𝓰_𝓹𝓸𝓲𝓷𝓽_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻_𝓽𝔂𝓹𝓮),
    𝔠𝔰𝔯_𝔯𝔢𝔤𝔦𝔰𝔱𝔢𝔯_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(𝓬𝓸𝓷𝓽𝓻𝓸𝓵_𝓼𝓽𝓪𝓽𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻_𝓽𝔂𝓹𝓮),
    𝔯𝔬𝔲𝔫𝔡𝔦𝔫𝔤_𝔪𝔬𝔡𝔢_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(𝓻𝓸𝓾𝓷𝓭𝓲𝓷𝓰_𝓶𝓸𝓭𝓮_𝓽𝔂𝓹𝓮),
    𝔣𝔢𝔫𝔠𝔢_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(𝓯𝓮𝓷𝓬𝓮_𝓸𝓹𝓮𝓻𝓪𝓷𝓭_𝓽𝔂𝓹𝓮),
    𝔦𝔪𝔪𝔢𝔡𝔦𝔞𝔱𝔢_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮),
    𝔲𝔭𝔭𝔢𝔯_𝔦𝔪𝔪𝔢𝔡𝔦𝔞𝔱𝔢_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(𝓾𝓹𝓹𝓮𝓻_𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮),
    𝔡𝔢𝔰𝔱𝔦𝔫𝔞𝔱𝔦𝔬𝔫_𝔦𝔪𝔪𝔢𝔡𝔦𝔞𝔱𝔢_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(𝓭𝓮𝓼𝓽𝓲𝓷𝓪𝓽𝓲𝓸𝓷_𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮),
    𝔟𝔯𝔞𝔫𝔠𝔥_𝔦𝔪𝔪𝔢𝔡𝔦𝔞𝔱𝔢_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(𝓫𝓻𝓪𝓷𝓬𝓱_𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮),
    𝔧𝔲𝔪𝔭_𝔦𝔪𝔪𝔢𝔡𝔦𝔞𝔱𝔢_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(𝓳𝓾𝓶𝓹_𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮),
    𝔠𝔰𝔯_𝔦𝔪𝔪𝔢𝔡𝔦𝔞𝔱𝔢_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(𝓬𝓼𝓻_𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮),
    𝔰𝔥𝔦𝔣𝔱_𝔦𝔪𝔪𝔢𝔡𝔦𝔞𝔱𝔢_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(𝓼𝓱𝓲𝓯𝓽_𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮),
    𝔴𝔬𝔯𝔡_𝔰𝔥𝔦𝔣𝔱_𝔦𝔪𝔪𝔢𝔡𝔦𝔞𝔱𝔢_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(𝔀𝓸𝓻𝓭_𝓼𝓱𝓲𝓯𝓽_𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮),
    𝔞𝔱𝔬𝔪𝔦𝔠_𝔞𝔡𝔡𝔯𝔢𝔰𝔰_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(𝒂𝒅𝒅𝒓𝒆𝒔𝒔<𝓰𝓮𝓷𝓮𝓻𝓪𝓵_𝓹𝓾𝓻𝓹𝓸𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻_𝓽𝔂𝓹𝓮, 𝐮𝐧𝐟𝐢𝐥𝐥𝐞𝐝_𝐟𝐥𝐮𝐞𝐧𝐭_𝐯𝐚𝐥𝐮𝐞>),
    𝔰𝔬𝔲𝔯𝔠𝔢_𝔞𝔡𝔡𝔯𝔢𝔰𝔰_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(𝒂𝒅𝒅𝒓𝒆𝒔𝒔<𝓰𝓮𝓷𝓮𝓻𝓪𝓵_𝓹𝓾𝓻𝓹𝓸𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻_𝓽𝔂𝓹𝓮, 𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮>),
    𝔡𝔢𝔰𝔱𝔦𝔫𝔞𝔱𝔦𝔬𝔫_𝔞𝔡𝔡𝔯𝔢𝔰𝔰_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(𝒂𝒅𝒅𝒓𝒆𝒔𝒔<𝓰𝓮𝓷𝓮𝓻𝓪𝓵_𝓹𝓾𝓻𝓹𝓸𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻_𝓽𝔂𝓹𝓮, 𝓭𝓮𝓼𝓽𝓲𝓷𝓪𝓽𝓲𝓸𝓷_𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮>),
    𝔭𝔯𝔢𝔣𝔢𝔱𝔠𝔥_𝔞𝔡𝔡𝔯𝔢𝔰𝔰_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(𝒂𝒅𝒅𝒓𝒆𝒔𝒔<𝓰𝓮𝓷𝓮𝓻𝓪𝓵_𝓹𝓾𝓻𝓹𝓸𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻_𝓽𝔂𝓹𝓮, 𝓹𝓻𝓮𝓯𝓮𝓽𝓬𝓱_𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮>),
}

#[cfg(feature = "std")]
impl<𝓰𝓮𝓷𝓮𝓻𝓪𝓵_𝓹𝓾𝓻𝓹𝓸𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻_𝓽𝔂𝓹𝓮: std::fmt::Display,
     𝓯𝓵𝓸𝓪𝓽𝓲𝓷𝓰_𝓹𝓸𝓲𝓷𝓽_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻_𝓽𝔂𝓹𝓮: std::fmt::Display,
     𝓬𝓸𝓷𝓽𝓻𝓸𝓵_𝓼𝓽𝓪𝓽𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻_𝓽𝔂𝓹𝓮: std::fmt::Display,
     𝓻𝓸𝓾𝓷𝓭𝓲𝓷𝓰_𝓶𝓸𝓭𝓮_𝓽𝔂𝓹𝓮: std::fmt::Display,
     𝓯𝓮𝓷𝓬𝓮_𝓸𝓹𝓮𝓻𝓪𝓷𝓭_𝓽𝔂𝓹𝓮: std::fmt::Display,
     𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮: std::fmt::Display,
     𝓾𝓹𝓹𝓮𝓻_𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮: std::fmt::Display,
     𝓭𝓮𝓼𝓽𝓲𝓷𝓪𝓽𝓲𝓸𝓷_𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮: std::fmt::Display,
     𝓫𝓻𝓪𝓷𝓬𝓱_𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮: std::fmt::Display,
     𝓳𝓾𝓶𝓹_𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮: std::fmt::Display,
     𝓬𝓼𝓻_𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮: std::fmt::Display,
     𝓹𝓻𝓮𝓯𝓮𝓽𝓬𝓱_𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮: std::fmt::Display,
     𝓼𝓱𝓲𝓯𝓽_𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮: std::fmt::Display,
     𝔀𝓸𝓻𝓭_𝓼𝓱𝓲𝓯𝓽_𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮: std::fmt::Display,
> std::fmt::Display for 𝐨𝐩𝐞𝐫𝐚𝐧𝐝_𝐫𝐯𝟔𝟒<
    𝓰𝓮𝓷𝓮𝓻𝓪𝓵_𝓹𝓾𝓻𝓹𝓸𝓼𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻_𝓽𝔂𝓹𝓮,
    𝓯𝓵𝓸𝓪𝓽𝓲𝓷𝓰_𝓹𝓸𝓲𝓷𝓽_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻_𝓽𝔂𝓹𝓮,
    𝓬𝓸𝓷𝓽𝓻𝓸𝓵_𝓼𝓽𝓪𝓽𝓮_𝓻𝓮𝓰𝓲𝓼𝓽𝓮𝓻_𝓽𝔂𝓹𝓮,
    𝓻𝓸𝓾𝓷𝓭𝓲𝓷𝓰_𝓶𝓸𝓭𝓮_𝓽𝔂𝓹𝓮,
    𝓯𝓮𝓷𝓬𝓮_𝓸𝓹𝓮𝓻𝓪𝓷𝓭_𝓽𝔂𝓹𝓮,
    𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮,
    𝓾𝓹𝓹𝓮𝓻_𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮,
    𝓭𝓮𝓼𝓽𝓲𝓷𝓪𝓽𝓲𝓸𝓷_𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮,
    𝓫𝓻𝓪𝓷𝓬𝓱_𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮,
    𝓳𝓾𝓶𝓹_𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮,
    𝓬𝓼𝓻_𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮,
    𝓹𝓻𝓮𝓯𝓮𝓽𝓬𝓱_𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮,
    𝓼𝓱𝓲𝓯𝓽_𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮,
    𝔀𝓸𝓻𝓭_𝓼𝓱𝓲𝓯𝓽_𝓲𝓶𝓶𝓮𝓭𝓲𝓪𝓽𝓮_𝓽𝔂𝓹𝓮,
> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            𝐨𝐩𝐞𝐫𝐚𝐧𝐝_𝐫𝐯𝟔𝟒::𝔤𝔭_𝔯𝔢𝔤𝔦𝔰𝔱𝔢𝔯_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(operand) => operand.fmt(f),
            𝐨𝐩𝐞𝐫𝐚𝐧𝐝_𝐫𝐯𝟔𝟒::𝔣𝔭_𝔯𝔢𝔤𝔦𝔰𝔱𝔢𝔯_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(operand) => operand.fmt(f),
            𝐨𝐩𝐞𝐫𝐚𝐧𝐝_𝐫𝐯𝟔𝟒::𝔠𝔰𝔯_𝔯𝔢𝔤𝔦𝔰𝔱𝔢𝔯_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(operand) => operand.fmt(f),
            𝐨𝐩𝐞𝐫𝐚𝐧𝐝_𝐫𝐯𝟔𝟒::𝔯𝔬𝔲𝔫𝔡𝔦𝔫𝔤_𝔪𝔬𝔡𝔢_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(operand) => operand.fmt(f),
            𝐨𝐩𝐞𝐫𝐚𝐧𝐝_𝐫𝐯𝟔𝟒::𝔣𝔢𝔫𝔠𝔢_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(operand) => operand.fmt(f),
            𝐨𝐩𝐞𝐫𝐚𝐧𝐝_𝐫𝐯𝟔𝟒::𝔦𝔪𝔪𝔢𝔡𝔦𝔞𝔱𝔢_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(operand) => operand.fmt(f),
            𝐨𝐩𝐞𝐫𝐚𝐧𝐝_𝐫𝐯𝟔𝟒::𝔲𝔭𝔭𝔢𝔯_𝔦𝔪𝔪𝔢𝔡𝔦𝔞𝔱𝔢_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(operand) => operand.fmt(f),
            𝐨𝐩𝐞𝐫𝐚𝐧𝐝_𝐫𝐯𝟔𝟒::𝔡𝔢𝔰𝔱𝔦𝔫𝔞𝔱𝔦𝔬𝔫_𝔦𝔪𝔪𝔢𝔡𝔦𝔞𝔱𝔢_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(operand) => operand.fmt(f),
            𝐨𝐩𝐞𝐫𝐚𝐧𝐝_𝐫𝐯𝟔𝟒::𝔟𝔯𝔞𝔫𝔠𝔥_𝔦𝔪𝔪𝔢𝔡𝔦𝔞𝔱𝔢_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(operand) => operand.fmt(f),
            𝐨𝐩𝐞𝐫𝐚𝐧𝐝_𝐫𝐯𝟔𝟒::𝔧𝔲𝔪𝔭_𝔦𝔪𝔪𝔢𝔡𝔦𝔞𝔱𝔢_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(operand) => operand.fmt(f),
            𝐨𝐩𝐞𝐫𝐚𝐧𝐝_𝐫𝐯𝟔𝟒::𝔠𝔰𝔯_𝔦𝔪𝔪𝔢𝔡𝔦𝔞𝔱𝔢_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(operand) => operand.fmt(f),
            𝐨𝐩𝐞𝐫𝐚𝐧𝐝_𝐫𝐯𝟔𝟒::𝔰𝔥𝔦𝔣𝔱_𝔦𝔪𝔪𝔢𝔡𝔦𝔞𝔱𝔢_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(operand) => operand.fmt(f),
            𝐨𝐩𝐞𝐫𝐚𝐧𝐝_𝐫𝐯𝟔𝟒::𝔴𝔬𝔯𝔡_𝔰𝔥𝔦𝔣𝔱_𝔦𝔪𝔪𝔢𝔡𝔦𝔞𝔱𝔢_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(operand) => operand.fmt(f),
            𝐨𝐩𝐞𝐫𝐚𝐧𝐝_𝐫𝐯𝟔𝟒::𝔞𝔱𝔬𝔪𝔦𝔠_𝔞𝔡𝔡𝔯𝔢𝔰𝔰_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(operand) => operand.fmt(f),
            𝐨𝐩𝐞𝐫𝐚𝐧𝐝_𝐫𝐯𝟔𝟒::𝔰𝔬𝔲𝔯𝔠𝔢_𝔞𝔡𝔡𝔯𝔢𝔰𝔰_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(operand) => operand.fmt(f),
            𝐨𝐩𝐞𝐫𝐚𝐧𝐝_𝐫𝐯𝟔𝟒::𝔡𝔢𝔰𝔱𝔦𝔫𝔞𝔱𝔦𝔬𝔫_𝔞𝔡𝔡𝔯𝔢𝔰𝔰_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(operand) => operand.fmt(f),
            𝐨𝐩𝐞𝐫𝐚𝐧𝐝_𝐫𝐯𝟔𝟒::𝔭𝔯𝔢𝔣𝔢𝔱𝔠𝔥_𝔞𝔡𝔡𝔯𝔢𝔰𝔰_𝔬𝔭𝔢𝔯𝔞𝔫𝔡(operand) => operand.fmt(f),
        }
    }
}

use super::super::super::𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝗿𝗶𝘀𝗰_𝘃::𝗼𝗽𝗲𝗿𝗮𝗻𝗱𝘀::𝒂𝒅𝒅𝒓𝒆𝒔𝒔;
use super::super::super::𝗮𝘀𝘀𝗲𝗺𝗯𝗹𝗲𝗿::𝗿𝗶𝘀𝗰_𝘃::𝗼𝗽𝗲𝗿𝗮𝗻𝗱𝘀::𝐮𝐧𝐟𝐢𝐥𝐥𝐞𝐝_𝐟𝐥𝐮𝐞𝐧𝐭_𝐯𝐚𝐥𝐮𝐞;
